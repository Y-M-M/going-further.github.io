<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机科学 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/</link>
    <description>Recent content in 计算机科学 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Oct 2024 11:05:57 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>操作系统bilibili版</title>
      <link>https://y-m-m.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fbilibili%E7%89%88/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fbilibili%E7%89%88/</guid>
      <description>&lt;h1 id=&#34;第一章-操作系统的介绍&#34;&gt;第一章 操作系统的介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11_1-操作系统的概念功能&#34;&gt;1.1_1 操作系统的概念、功能&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本的系统软件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统是系统资源的管理者&#xA;&lt;ul&gt;&#xA;&lt;li&gt;补充：执行一个程序前需要将该程序放到内存中，才能被CPU处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;向上提供方便易用的服务&#xA;&lt;ul&gt;&#xA;&lt;li&gt;封装思想：操作系统把一些丑陋的硬件共嗯那个封装成简单易用的服务，使用户能更方便的使用计算机，用户无需关心底层硬件的原理，只需要对操作系统发出指令即可&lt;/li&gt;&#xA;&lt;li&gt;GUI 图形化用户接口&lt;/li&gt;&#xA;&lt;li&gt;联机命令接口=交互式命令接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户说一句，系统跟着做一句&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脱机命令接口(批处理命令接口)&lt;/li&gt;&#xA;&lt;li&gt;程序接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以在程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用&lt;/li&gt;&#xA;&lt;li&gt;例如，在写C语言&amp;quot;Hello World&amp;quot;程序时，在printf函数的底层就使用到了操作系统提供的显式相关的“系统调用”&lt;/li&gt;&#xA;&lt;li&gt;系统调用类似于函数调用，是应用程序请求系统操作服务的唯一方式&lt;/li&gt;&#xA;&lt;li&gt;在有的教材中，系统调用=广义指令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;是最接近硬件的一层软件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要实现对硬件机器的扩展&lt;/li&gt;&#xA;&lt;li&gt;裸机：没有任何软件支持的计算机称为裸机&lt;/li&gt;&#xA;&lt;li&gt;虚拟机：覆盖了软件的机器称为扩充机器，又称之为虚拟机&lt;/li&gt;&#xA;&lt;li&gt;操作系统将CPU, 内存，磁盘，显示器，键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-11%2019.53.51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;11_2-操作系统的特征&#34;&gt;1.1_2 操作系统的特征&lt;/h2&gt;&#xA;&lt;h3 id=&#34;并发&#34;&gt;并发&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并发：两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。/并行：两个或多个事件在同一时刻同时发生&lt;/li&gt;&#xA;&lt;li&gt;操作系统的并发性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。操作系统就是伴随着“多道程序技术”而出现的，因此，操作系统和程序并发是一起诞生的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;注意&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单核CPU同一时刻只能执行一个程序，多个程序只能并发执行&lt;/li&gt;&#xA;&lt;li&gt;多核CPU同一时刻可以同时执行多个程序，多个程序可以并行地执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;是操作系统一个重要的基础特性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;共享&#34;&gt;共享&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;资源共享，系统中的资源可供内存中多个并发执行的进程共同使用&lt;/li&gt;&#xA;&lt;li&gt;两种共享方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互斥共享方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个时间段内只允许一个进程访问该资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同时共享方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;允许一个时间段内多个进程“同时”对它们进行访问&lt;/li&gt;&#xA;&lt;li&gt;同时往往是宏观上的，微观上，这些进程可能是交替地对该资源进行访问的(分时共享)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;并发和共享的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义&lt;/li&gt;&#xA;&lt;li&gt;如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;虚拟&#34;&gt;虚拟&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体(前者)是实际存在的，而逻辑上的对应物(后者)是用户感应到的&lt;/li&gt;&#xA;&lt;li&gt;虚拟技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空分复用技术(如虚拟存储技术)&lt;/li&gt;&#xA;&lt;li&gt;时分复用技术(如虚拟处理器)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;并发性与虚拟性的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果失去了并发性，则一个时间段内系统中之运行一道程序，那么就失去了实现虚拟性的意义了&lt;/li&gt;&#xA;&lt;li&gt;没有并发性，就谈不上虚拟性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;异步&#34;&gt;异步&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性&lt;/li&gt;&#xA;&lt;li&gt;由于并发运行的程序会争抢着使用系统资源，而系统中的资源有限，因此进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进&lt;/li&gt;&#xA;&lt;li&gt;并发性与异步性的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果失去了并发性，即系统只能串行地运行各个程序，那么每个程序的执行会一贯到底，只有程序拥有并发性，才有可能导致异步性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结-1&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-11%2022.16.20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;12-操作系统的发展和分类&#34;&gt;1.2 操作系统的发展和分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;手工操作阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要缺点：用户独占全机、人际速度矛盾导致资源利用率低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;批处理阶段——单道批处理系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;引入脱机输入/输出技术，并由监督程序负责控制作业的输入、输出&lt;/li&gt;&#xA;&lt;li&gt;监督程序是操作系统的雏形&lt;/li&gt;&#xA;&lt;li&gt;主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;批处理阶段——多道批处理系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每次往内存中读入多道程序&lt;/li&gt;&#xA;&lt;li&gt;操作系统正式诞生，用于支持多道程序并发运行&lt;/li&gt;&#xA;&lt;li&gt;主要优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌“状态，系统吞吐量大&lt;/li&gt;&#xA;&lt;li&gt;主要缺点：用户响应时间长，没有人机交互功能(用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行。无法调试程序/无法在程序运行过程中输入一些参数)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分时操作系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互&lt;/li&gt;&#xA;&lt;li&gt;主要优点：用户请求可以被即时相应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在&lt;/li&gt;&#xA;&lt;li&gt;主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实时操作系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队&lt;/li&gt;&#xA;&lt;li&gt;在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性&lt;/li&gt;&#xA;&lt;li&gt;分类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬实时系统：必须在绝对严格的规定时间内完成处理&lt;/li&gt;&#xA;&lt;li&gt;软实时系统：能接受偶尔违反时间规定&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;其他几种操作系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络操作系统 实现数据传送等功能，实现网络中各种资源的共(如文件共享)和各台计算机之间的通信&lt;/li&gt;&#xA;&lt;li&gt;分布式操作系统：分布性和并行性。系统中各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务&lt;/li&gt;&#xA;&lt;li&gt;个人计算机操作系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结-2&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-11%2022.29.42.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>程序设计实践</title>
      <link>https://y-m-m.github.io/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;张海滨&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;mailto:zhanghb@bupt.edu.cn&#34;&gt;zhanghb@bupt.edu.cn&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;教材&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序设计实践 The Practice of Programming 人民邮电出版社&lt;/li&gt;&#xA;&lt;li&gt;程序设计实践 机械工业出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;20学时 10周讲解相关知识；12学时大作业，验收&lt;/li&gt;&#xA;&lt;li&gt;课程内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;风格&lt;/li&gt;&#xA;&lt;li&gt;设计与实现&lt;/li&gt;&#xA;&lt;li&gt;接口&lt;/li&gt;&#xA;&lt;li&gt;排错&lt;/li&gt;&#xA;&lt;li&gt;测试&lt;/li&gt;&#xA;&lt;li&gt;性能&lt;/li&gt;&#xA;&lt;li&gt;可移植性&lt;/li&gt;&#xA;&lt;li&gt;记法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;考核方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;平时成绩 小作业 30%&lt;/li&gt;&#xA;&lt;li&gt;大作业 70%&lt;/li&gt;&#xA;&lt;li&gt;均提交至教学云平台，大作业需验收&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;大作业&#xA;&lt;ul&gt;&#xA;&lt;li&gt;题目：基于领域特定语言的客服机器人的设计与实现&lt;/li&gt;&#xA;&lt;li&gt;描述：领域特定语言(DSL)可以提供一种相对简单的文法，用于特定领域的业务流程定制。本作业要求定义一个领域特定脚本语言，这个语言能够描述在线客服机器人(机器人客服是目前提升客服效率的重要技术，在银行、通信和商务等领域的复杂信息系统中有广泛的应用)的自动应答逻辑，并设计实现一个解释器解释执行这个脚本，可以根据用户的不同输入，根据脚本的逻辑设计给出相应的应答&lt;/li&gt;&#xA;&lt;li&gt;基本要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;脚本语言的语法可以自由定义，只要与以上满足客服机器人自动应答逻辑的要求&lt;/li&gt;&#xA;&lt;li&gt;程序输入输出形式不限，可以简化为纯命令行界面&lt;/li&gt;&#xA;&lt;li&gt;应该输出几种不同的脚本范例，对不同范例解释执行之后会有不同的行为表现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;评分标准&#xA;&lt;ul&gt;&#xA;&lt;li&gt;风格15分，代码注释6分，命名6分，其它3分&lt;/li&gt;&#xA;&lt;li&gt;设计和实现30分，其中数据结构7分，模块划分7分，功能8分，文档8分&lt;/li&gt;&#xA;&lt;li&gt;接口15分，程序间接口8分，人机接口7分&lt;/li&gt;&#xA;&lt;li&gt;测试30分，测试桩15分，自动测试脚本15分&lt;/li&gt;&#xA;&lt;li&gt;记法10分，文档中对此脚本语言的语法的准确描述&lt;/li&gt;&#xA;&lt;li&gt;抄袭或有意被抄袭0分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;养成使用版本管理工具的习惯&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第一章-风格style&#34;&gt;第一章 风格style&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码风格因人而异&lt;/li&gt;&#xA;&lt;li&gt;有争议的风格&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遵从你所在组织的规范&lt;/li&gt;&#xA;&lt;li&gt;与同一个文件中其他代码风格保持一致&lt;/li&gt;&#xA;&lt;li&gt;与同一项目里其他文件的风格尽量保持一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;无争议的风格：命名风格，表达式和语句的风格，一致性和习惯用法，函数宏定义，避免神秘的数，注释风格等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;程序的风格&#34;&gt;程序的风格&lt;/h2&gt;&#xA;&lt;h3 id=&#34;命名的风格&#34;&gt;命名的风格&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;名字要准确的表达用途&lt;/li&gt;&#xA;&lt;li&gt;名字不是越长越好&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局变量可以用具有描述意义的长名字&lt;/li&gt;&#xA;&lt;li&gt;局部变量用短名字会显得程序更简洁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;类的成员的名字，不要再啰嗦重复类名&lt;/li&gt;&#xA;&lt;li&gt;用动词或者动词+名次定义函数名&lt;/li&gt;&#xA;&lt;li&gt;返回布尔值的函数名应该是一个命题，通常使用is作为函数名中的动词&lt;/li&gt;&#xA;&lt;li&gt;名字尽可能简单明了，不要用“否定之否定”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;表达式和语句&#34;&gt;表达式和语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用表达式的自然形式，即常见的易于理解的形式&lt;/li&gt;&#xA;&lt;li&gt;利用括号排除歧义，即使语法上不要求括号，也建议加上括号以便提高代码可读性&lt;/li&gt;&#xA;&lt;li&gt;分解复杂的表达式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;一致性和习惯用法&#34;&gt;一致性和习惯用法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用一致的缩进和花括号风格(例如两行以上一定加花括号)&lt;/li&gt;&#xA;&lt;li&gt;使用大多数人最习惯的用法(for循环)&lt;/li&gt;&#xA;&lt;li&gt;用else if处理多路选择，一个判断尽可能接近它所对应的动作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;函数宏&#34;&gt;函数宏&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免宏定义参数中写很多东西。函数宏的缺点，直接替换，导致用到两次的参数被替换两次，执行两次，可能直接导致错误&lt;/li&gt;&#xA;&lt;li&gt;函数宏的缺点，直接替换，导致用到两次的参数会被替换两次，执行两次，也可能导致性能错误&lt;/li&gt;&#xA;&lt;li&gt;如果一定要用函数宏，不要吝啬括号&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ 尽可能使用inline函数&lt;/li&gt;&#xA;&lt;li&gt;Java根本不支持函数宏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;神秘的数&#34;&gt;神秘的数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给所有数字起一个名字&lt;/li&gt;&#xA;&lt;li&gt;直接使用字符形式的常量，不要使用它的整数形式&lt;/li&gt;&#xA;&lt;li&gt;利用语言去计算对象的大小，从而减少代码修改负担，提高代码简洁性，可以定义一个通用的宏&lt;/li&gt;&#xA;&lt;li&gt;尽可能让编译器来计算数值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;注释的风格&#34;&gt;注释的风格&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注释与代码要始终保持一致&lt;/li&gt;&#xA;&lt;li&gt;不要写没用的注释&lt;/li&gt;&#xA;&lt;li&gt;用好的命名代替注释&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用注释自动生成文档&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;阿里代码规约&#34;&gt;阿里代码规约&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/p3c&#34;&gt;https://github.com/alibaba/p3c&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>python程序设计</title>
      <link>https://y-m-m.github.io/post/python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;考核&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在线作业 30分 oj 10.91.145.2&lt;/li&gt;&#xA;&lt;li&gt;小作业 30分 使用第三方工具，完成数据的爬取，处理和展示&lt;/li&gt;&#xA;&lt;li&gt;大作业 40分 综合使用数据处理工具，爬去网站信息，并对数据进行处理、分析和可视化展示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;python语言介绍&#34;&gt;python语言介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;python语言的基本特点&#34;&gt;python语言的基本特点&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python是一种动态类型的，解释性的高级编程语言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态类型：变量类型在程序运行前确定&lt;/li&gt;&#xA;&lt;li&gt;动态类型：变量类型在程序执行时确定，可以改变&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;语法简洁易读，编程模式非常符合人类的思维方式和习惯&lt;/li&gt;&#xA;&lt;li&gt;通用、跨平台&lt;/li&gt;&#xA;&lt;li&gt;强大的社区支持&lt;/li&gt;&#xA;&lt;li&gt;理想的“胶水语言”：具有跨语言跨平台跨技术栈的强大整合能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python语言的优势&#34;&gt;python语言的优势&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;语法简洁，同时提供丰富的数据结构和标准库&lt;/li&gt;&#xA;&lt;li&gt;易学易用，学习周期短，开发效率高&#xA;&lt;ul&gt;&#xA;&lt;li&gt;语法接近自然语言&lt;/li&gt;&#xA;&lt;li&gt;虽然代码执行效率没有编译型语言高，能够节省编程时间&lt;/li&gt;&#xA;&lt;li&gt;第三方库几乎覆盖所有技术领域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python语言的缺点&#34;&gt;python语言的缺点&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;动态解释型语言，运行速度慢&lt;/li&gt;&#xA;&lt;li&gt;全局解释器锁(GIL)限制多线程并发&lt;/li&gt;&#xA;&lt;li&gt;源代码不能加密&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python相关组织&#34;&gt;python相关组织&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python软件基金会PSF&lt;/li&gt;&#xA;&lt;li&gt;python社区 指导委员会&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;python安装&#34;&gt;python安装&lt;/h1&gt;&#xA;&lt;h2 id=&#34;在命令行窗口使用repl&#34;&gt;在命令行窗口使用REPL&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;REPL是一种交互式编程环境，通常用于解释型编程语言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Read&lt;/li&gt;&#xA;&lt;li&gt;Eval&lt;/li&gt;&#xA;&lt;li&gt;Print&lt;/li&gt;&#xA;&lt;li&gt;Loop&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;在命令行窗口运行py文件&#34;&gt;在命令行窗口运行.py文件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python file.py&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python集成开发环境推荐&#34;&gt;python集成开发环境推荐&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;PyCharm&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Subime Text&lt;/li&gt;&#xA;&lt;li&gt;Vim&lt;/li&gt;&#xA;&lt;li&gt;GNU Emacs&lt;/li&gt;&#xA;&lt;li&gt;IDLE&lt;/li&gt;&#xA;&lt;li&gt;Atom&lt;/li&gt;&#xA;&lt;li&gt;Spyder&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Eclipse&lt;/li&gt;&#xA;&lt;li&gt;Eric Python&lt;/li&gt;&#xA;&lt;li&gt;Wing&lt;/li&gt;&#xA;&lt;li&gt;PyScripter&lt;/li&gt;&#xA;&lt;li&gt;Pyzo&lt;/li&gt;&#xA;&lt;li&gt;Thonny&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考书&#34;&gt;参考书&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python语言程序设计基础(第2版) 嵩天，礼欣，黄天宇著&lt;/li&gt;&#xA;&lt;li&gt;零基础入门学习Python(第2版) 小甲鱼(李佳宁)著&lt;/li&gt;&#xA;&lt;li&gt;python变成从入门到实践(第3版)&lt;/li&gt;&#xA;&lt;li&gt;python基础教程(第3版) Magnus Lie Hetland&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;python基本语法&#34;&gt;python基本语法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;python程序基本结构&#34;&gt;python程序基本结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;简单语句：写在一行内的语句&lt;/li&gt;&#xA;&lt;li&gt;复合语句，包含其他语句(组)的语句，需要缩进来表示语句块的层次结构(除了要求缩进的情况，其他情况不能缩进)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;条件语句 if elif else&#xA;&lt;ul&gt;&#xA;&lt;li&gt;句头、句体&lt;/li&gt;&#xA;&lt;li&gt;句头后面都是冒号结尾&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;循环语句 for while&lt;/li&gt;&#xA;&lt;li&gt;函数定义 def&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;注释 #&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;物理行和逻辑行&#34;&gt;物理行和逻辑行&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;物理行：回车&lt;/li&gt;&#xA;&lt;li&gt;逻辑行：根据显式或隐式行拼接规则所拼接在一起的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;显示拼接行 \结尾&lt;/li&gt;&#xA;&lt;li&gt;隐式拼接行 圆括号、方括号、花括号内的表达式可以分成多个物理行，不必使用反斜杠&#xA;&lt;ul&gt;&#xA;&lt;li&gt;隐式行拼接可含注释&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;c和python程序的语法结构比较&#34;&gt;C和Python程序的语法结构比较&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;C语言&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;python&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;引用外部模块&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;#include&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;import 内置函数和对象直接调用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;程序入口&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;main()函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;从第一行开始执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;语句结束标志&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;换行符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;代码起始/结束标志&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;{}&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;对齐缩进&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;标识符和保留字&#34;&gt;标识符和保留字&lt;/h2&gt;&#xA;&lt;h3 id=&#34;python标识符&#34;&gt;python标识符&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用来命名变量、函数、类、对象、模块等的名称&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字符集：在ASCII字符集范围内，大小写字母(A&lt;del&gt;Z, a&lt;/del&gt;z)、数字(0~9)、下划线(_)&lt;/li&gt;&#xA;&lt;li&gt;首字母：不能以数字开头&lt;/li&gt;&#xA;&lt;li&gt;大小写：区分大小写&lt;/li&gt;&#xA;&lt;li&gt;保留字&lt;/li&gt;&#xA;&lt;li&gt;长度：语言对长度没有限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;python保留字&#34;&gt;python保留字&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关键字(保留字)&lt;/li&gt;&#xA;&lt;li&gt;软关键字&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python新增match语句，把match, case,_定义为软关键字，仅在match语句内部作为关键字&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python变量和赋值语句&#34;&gt;python变量和赋值语句&lt;/h2&gt;&#xA;&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量：在python中，可以将变量视为指向值(数据对象)的标识符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;赋值语句&#34;&gt;赋值语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;赋值语句：变量=表达式&lt;/li&gt;&#xA;&lt;li&gt;python作为动态类型语言，变量使用前不需要声明其类型，变量的首次赋值就是其创建过程，变量的类型就是赋值给它的类型&lt;/li&gt;&#xA;&lt;li&gt;重新赋值不仅可以改变变量的值，也可以改变变量的类型&lt;/li&gt;&#xA;&lt;li&gt;在python中，&amp;rsquo;=&amp;lsquo;不是运算符，变量=表达式是赋值语句，不是赋值表达式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x = (y = y + 1)用法错误&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;赋值语句支持链式赋值&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x = y = z = 5&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;赋值语句支持多重赋值&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x, y, z = 5, &amp;lsquo;a&amp;rsquo;, 1.5&lt;/li&gt;&#xA;&lt;li&gt;例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交换两个变量的值 a, b = b, a&lt;/li&gt;&#xA;&lt;li&gt;从列表中取值&#xA;&lt;ul&gt;&#xA;&lt;li&gt;list = [1, 2, 3]&lt;/li&gt;&#xA;&lt;li&gt;a, b, c = list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;python3.8中，新增了表达式，操作符为:=&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x := (y := y + 1) 合法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;python中的常量&#34;&gt;python中的常量&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常量，在程序执行中其值不会改变的变量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python没有提供const，没有真正意义上的常量&lt;/li&gt;&#xA;&lt;li&gt;一般默认全大写的变量不会修改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python数据类型&#34;&gt;python数据类型&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本数据类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有一种类型int没有固定的最大值限制，实际受限于可用内存&lt;/li&gt;&#xA;&lt;li&gt;可以使用多种进制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;十进制 除了0以外，首位不能是0&lt;/li&gt;&#xA;&lt;li&gt;二进制0b或0B&lt;/li&gt;&#xA;&lt;li&gt;八进制0o或0O&lt;/li&gt;&#xA;&lt;li&gt;十六进制0x或0X&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;浮点型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可用十进制或科学计数法表示&lt;/li&gt;&#xA;&lt;li&gt;采用十进制表示时，可以省略小数或整数部分，只要保留小数点&lt;/li&gt;&#xA;&lt;li&gt;科学计数法使用e或E来表示幂&lt;/li&gt;&#xA;&lt;li&gt;数值范围存在限制，小树精度也存在限制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;合法，等同于10.0(省略了小数部分)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;.1 合法&lt;/li&gt;&#xA;&lt;li&gt;1E+10 合法&lt;/li&gt;&#xA;&lt;li&gt;1e10 合法&lt;/li&gt;&#xA;&lt;li&gt;3.14e-3 合法&lt;/li&gt;&#xA;&lt;li&gt;0e0&lt;/li&gt;&#xA;&lt;li&gt;1 呃0 不合法，内部不能有空格&lt;/li&gt;&#xA;&lt;li&gt;01e010 合法，浮点数解析时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;组合数据类型&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>conda常用指令</title>
      <link>https://y-m-m.github.io/post/conda%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/conda%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;操作&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;命令&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;新建环境&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda create -n ENV_NAME python=3.8.8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;激活环境&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda activate ENV_NAME&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;安装包&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda intall PACKAGE_NAME&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;卸载包&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda remove PACKAGE_NAME&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;显示所有已安装的包&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda list&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;退出环境&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda deactivate&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;删除环境&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda env remove -n ENV_NAME&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;显示所有已安装的环境&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;conda env list&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>计算机网络课程设计</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%BD%91%E8%AF%BE%E8%AE%BE/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%BD%91%E8%AF%BE%E8%AE%BE/</guid>
      <description>&lt;h1 id=&#34;题目-dns中继服务器的实现&#34;&gt;题目 DNS中继服务器的实现&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计一个DNS服务器程序，读入“域名-IP地址”对照表（一个文件），当客户端查询域名对应的IP地址时，用域名检索该对照表，得到三种检索结果：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检索结果为IP地址0.0.0.0，则向客户端返回“域名不存在”的报错信息（不良网站拦截功能）&lt;/li&gt;&#xA;&lt;li&gt;检索结果为普通IP地址，则向客户返回这个地址（服务器功能）&lt;/li&gt;&#xA;&lt;li&gt;表中未检测到该域名，则向因特网DNS服务器发出查询，并将结果返回给客户端（中继功能）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;考虑多个计算机上的客户端会同时查询，需要进行消息ID的转换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;dns介绍&#34;&gt;DNS介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dns查询过程迭代查询&#34;&gt;DNS查询过程(迭代查询)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端向DNS服务器发起查询请求&lt;/li&gt;&#xA;&lt;li&gt;DNS搜索本地解析库没有结果。向根域发起查询请求，根域告诉DNS服务器，.com服务器上有它需要的资源&lt;/li&gt;&#xA;&lt;li&gt;DNS服务器又向.com服务器发起请求，.com服务器告诉DNS服务器，.google.com上有它需要的资源&lt;/li&gt;&#xA;&lt;li&gt;DNS服务器又向.google.com服务器发起请求，得到解析记录，并返回给了客户端。用户提供一种名称，查询以得到另一种名称：域名-&amp;gt;IP或IP-&amp;gt;域名&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dns报文&#34;&gt;DNS报文&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;构成&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-06-24%2021.06.06.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;格式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;除Header外其余四部分为可变长度(12字节长)&lt;/li&gt;&#xA;&lt;li&gt;Question: the question for the name server&lt;/li&gt;&#xA;&lt;li&gt;Answer: RRs answering the question&lt;/li&gt;&#xA;&lt;li&gt;Authority: RRs pointing toward an authority&lt;/li&gt;&#xA;&lt;li&gt;Additional: RRs holding additional information&lt;/li&gt;&#xA;&lt;li&gt;后三段格式相同，每段都是由0~n个资源记录(Resource Record)构成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;报头字段 12字节&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-06-24%2021.10.12.png&#34; alt=&#34;Header Section Format&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ID&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由客户程序设置并由服务器返回结果。客户程序通过它来确定响应与查询是否匹配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;QR：0表示查询报，1表示响应报&lt;/li&gt;&#xA;&lt;li&gt;OPCODE&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通常值为0(标准查询)，其他值为1(反向查询)和2(服务器状态请求)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AA：权威答案&lt;/li&gt;&#xA;&lt;li&gt;TC：截断的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应答的总长度超过512字节时，只返回前512个字节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RD：期望递归&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询报中设置，响应报中返回&lt;/li&gt;&#xA;&lt;li&gt;告诉名字服务器处理递归查询&lt;/li&gt;&#xA;&lt;li&gt;如果该位为1，则递归查询&lt;/li&gt;&#xA;&lt;li&gt;如果该位为0，且被请求的名字服务器没有一个权威回答，就返回一个能解答该查询的其他名字服务器列表，这称为迭代查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RA：递归可用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果名字服务器支持递归查询，则在响应中该比特设置为1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Z：必须为0，保留字段&lt;/li&gt;&#xA;&lt;li&gt;RCODE：响应码，仅用于响应报&#xA;&lt;ul&gt;&#xA;&lt;li&gt;值为0(没有差错)&lt;/li&gt;&#xA;&lt;li&gt;值为3表示名字差错。从权威名字服务器返回，表示在查询中指定域名不存在&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;QDCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of entries in the question section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ANCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of RRs in the answer section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;NSCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of name server RRs in authority records section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ARCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of RRs in additional records section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Question Section Format&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-06-24%2021.25.28.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机组成原理bilibili版</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86bilibili%E7%89%88/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86bilibili%E7%89%88/</guid>
      <description>&lt;h1 id=&#34;第一章-计算机系统概述&#34;&gt;第一章 计算机系统概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-1-计算机系统的组成&#34;&gt;1-1 计算机系统的组成&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件系统（软件需要在硬件上运行）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统软件：为管理整个计算机系统所编制的程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统 数据库管理系统 网络系统&lt;/li&gt;&#xA;&lt;li&gt;标准程序库 语言处理程序 服务程序&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用软件：为实现用户应用所编制的各种程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;科学计算 数据处理&lt;/li&gt;&#xA;&lt;li&gt;过程控制 事务管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;硬件系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机&lt;/li&gt;&#xA;&lt;li&gt;外设&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;计算机系统性能的好坏，取决于硬件和软件功能的总和&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-2-计算机的发展电子数字计算机&#34;&gt;1-2 计算机的发展（电子数字计算机）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;图灵机：理想的计算模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种具备读写、存储等功能的通用计算机模型&lt;/li&gt;&#xA;&lt;li&gt;一条带子，一个读写头和一个控制装置，能执行任何给定的计算，能执行任何可能的任务&lt;/li&gt;&#xA;&lt;li&gt;奠定了现代计算机的基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;1938年 信息论创始人 香农-&amp;gt;布尔代数与开关电路的联系&lt;/li&gt;&#xA;&lt;li&gt;世界上第一台真正意义上的电子数字计算机 阿塔纳索夫-贝瑞计算机ABC 300个电子管，不可编程，仅用于求解线性方程组&lt;/li&gt;&#xA;&lt;li&gt;1946，基于ABC计算机-&amp;gt;电子数字积分机和计算机ENIAC 十进制、弹道参数计算 莫克利和艾克特得到美国军方的支持和冯·诺依曼等人的帮助&lt;/li&gt;&#xA;&lt;li&gt;四个发展阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第1代1946-1957 电子管（真空管） 使用机器语言编程，无操作系统&lt;/li&gt;&#xA;&lt;li&gt;第2代1958-1-64 晶体管 主要使用汇编语言编程，开始使用FORTRAN、COBOL等高等语言，单道批处理系统&lt;/li&gt;&#xA;&lt;li&gt;第3代1965-1971 集成电路 高级语言进一步发展，出现了B语言（C语言的前身），多道批处理系统，分时系统&lt;/li&gt;&#xA;&lt;li&gt;第4代1972至今，超大规模集成电路 各种高级语言，现代操作系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;体积越小、功耗月底、可靠性越高、速度越快-&amp;gt;依赖于电子器件的发展&lt;/li&gt;&#xA;&lt;li&gt;摩尔定律：半导体集成电路上可容纳的晶体管数量大约每经过18-24个月便会增加一倍。换言之，处理器的性能大约每两年翻一倍，同时价格下降为之前的一半 （从2013年开始，减缓为3年翻一番&lt;/li&gt;&#xA;&lt;li&gt;软件发展&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器语言&lt;/li&gt;&#xA;&lt;li&gt;汇编语言&lt;/li&gt;&#xA;&lt;li&gt;高级语言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一个高级语言FORTRAN&lt;/li&gt;&#xA;&lt;li&gt;最简单的语言Basic&lt;/li&gt;&#xA;&lt;li&gt;里程碑Pascal&lt;/li&gt;&#xA;&lt;li&gt;现代程序语革命的起点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;面向对象&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++&lt;/li&gt;&#xA;&lt;li&gt;Java&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当前计算机发展趋势&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更微型化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;低功耗&lt;/li&gt;&#xA;&lt;li&gt;较高性能&lt;/li&gt;&#xA;&lt;li&gt;多用途&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;更巨型化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超高速&lt;/li&gt;&#xA;&lt;li&gt;并行处理&lt;/li&gt;&#xA;&lt;li&gt;智能化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;目前我国最快的超级计算机是神威·太湖之光，每秒可进行9.3亿亿次浮点运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-3-计算机硬件&#34;&gt;1-3 计算机硬件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;冯诺依曼计算机&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机网络bilibili版</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cbilibili%E7%89%88/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cbilibili%E7%89%88/</guid>
      <description>&lt;p&gt;bilibili 计算机网络微课堂&#xA;持续更新中&lt;/p&gt;&#xA;&lt;h1 id=&#34;p1-概述&#34;&gt;P1 概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-计算机网络在信息时代的作用&#34;&gt;1.1 计算机网络在信息时代的作用&lt;/h2&gt;&#xA;&lt;h2 id=&#34;12-因特网概述&#34;&gt;1.2 因特网概述&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络互联网和因特网&#34;&gt;网络、互联网和因特网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络Network：若干节点Node和连接这些节点的链路Link组成&lt;/li&gt;&#xA;&lt;li&gt;多个网络还可以通过路由器互联起来，这样就构成了一个范围更大的网络，即互联网，因此，互联网是“网络的网络”&lt;/li&gt;&#xA;&lt;li&gt;因特网Internet是世界上最大的互联网络&lt;/li&gt;&#xA;&lt;li&gt;区别Internet（因特网，采用TCP/IP协议） 和 internet（互联网）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;因特网发展的三个阶段&#34;&gt;因特网发展的三个阶段&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从单个网络ARPANET向互联网发展&lt;/li&gt;&#xA;&lt;li&gt;逐步建成三级结构的因特网&lt;/li&gt;&#xA;&lt;li&gt;逐步形成了多层次的ISP结构的因特网&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;基于isp的三层结构的因特网&#34;&gt;基于ISP的三层结构的因特网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因特网服务提供者ISP(Internet Service Provider)&lt;/li&gt;&#xA;&lt;li&gt;国际性区域（主干网） 第一层ISP&lt;/li&gt;&#xA;&lt;li&gt;区域性或国家性覆盖规模 第二层ISP 大公司&lt;/li&gt;&#xA;&lt;li&gt;本地ISP 校园网、企业网、住宅用户、无线移动&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;因特网的标准化工作&#34;&gt;因特网的标准化工作&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因特网的标准化工作对因特网的发展起到了非常重要的作用&lt;/li&gt;&#xA;&lt;li&gt;面向公众&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RFC技术文档可以免费下载&lt;/li&gt;&#xA;&lt;li&gt;任何人都可以随时用电子邮件发表对某个文档的意见或建议&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;因特网协会ISOC是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和作用&lt;/li&gt;&#xA;&lt;li&gt;制定因特网的正式标准需要经过以下4个阶段：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因特网草案（还不是RFC文档）&lt;/li&gt;&#xA;&lt;li&gt;建议标准（从这个阶段开始就成为RFC文档）&lt;/li&gt;&#xA;&lt;li&gt;草案标准&lt;/li&gt;&#xA;&lt;li&gt;因特网标准&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;因特网的组成&#34;&gt;因特网的组成&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;边缘部分：由多有连接在因特网上的主机组成，是用户直接使用的，用来进行通信和资源共享&lt;/li&gt;&#xA;&lt;li&gt;核心部分：由大量网络和连接这些网络的路由器组成，这部分市委边缘部分提供服务的（提供连通性和交换）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;路由器：专用计算机，不称之为主机，是实现分组交换的关键部件，转发收到的分组&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;13-三种交换方式&#34;&gt;1.3 三种交换方式&lt;/h2&gt;&#xA;&lt;h3 id=&#34;电路交换circuit-switching&#34;&gt;电路交换circuit switching&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;电话两两连接&lt;/li&gt;&#xA;&lt;li&gt;中间介质：电话交换机&lt;/li&gt;&#xA;&lt;li&gt;电话交换机接通电话线的方式&lt;/li&gt;&#xA;&lt;li&gt;从通信资源的分配角度来看，交换就是按照某种方式动态地分配传输线路的资源&lt;/li&gt;&#xA;&lt;li&gt;用户线为单个用户所有&lt;/li&gt;&#xA;&lt;li&gt;电话交换机之间的中继线共用&lt;/li&gt;&#xA;&lt;li&gt;电路交换的三个步骤&#xA;&lt;ul&gt;&#xA;&lt;li&gt;建立连接（分配通信资源）&lt;/li&gt;&#xA;&lt;li&gt;通话（一直占用通信资源）&lt;/li&gt;&#xA;&lt;li&gt;释放连接（归还通信资源）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用电路交换来传送计算机数据时，其线路的传输效率往往很低&lt;/li&gt;&#xA;&lt;li&gt;比特流直达终点&lt;/li&gt;&#xA;&lt;li&gt;优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通信时延小&lt;/li&gt;&#xA;&lt;li&gt;有序传输&lt;/li&gt;&#xA;&lt;li&gt;没有冲突&lt;/li&gt;&#xA;&lt;li&gt;适用范围广（模拟信号、数字信号）&lt;/li&gt;&#xA;&lt;li&gt;实时性强&lt;/li&gt;&#xA;&lt;li&gt;控制简单&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;建立连接时间长&lt;/li&gt;&#xA;&lt;li&gt;线路独占、使用效率低&lt;/li&gt;&#xA;&lt;li&gt;灵活性差&lt;/li&gt;&#xA;&lt;li&gt;难以规格化（不同类型、不同速率的终端难以进行通信，难以进行差错控制）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分组交换packet-switching&#34;&gt;分组交换Packet Switching&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算机网络通常采用&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向对象程序设计(C&#43;&#43;)</title>
      <link>https://y-m-m.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1c&#43;&#43;/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1c&#43;&#43;/</guid>
      <description>&lt;h1 id=&#34;参考书目&#34;&gt;参考书目&lt;/h1&gt;&#xA;&lt;h2 id=&#34;入门级别&#34;&gt;入门级别&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++面向对象程序设计，龚晓庆编著，清华大学出版社&lt;/li&gt;&#xA;&lt;li&gt;Essential C++中文版，Stanley B.Lippman著，华中科技大学出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;大全类&#34;&gt;大全类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++程序设计语言，Bjarne Stroustrup著，机械工业出版社&lt;/li&gt;&#xA;&lt;li&gt;C++ Primer中文版，Stanley B.Lippman等著，人民邮电出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;高阶进阶类&#34;&gt;高阶进阶类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Effective C++, More Effective C++, Thinking in C++&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;考核方式&#34;&gt;考核方式&lt;/h1&gt;&#xA;&lt;h2 id=&#34;主要考核应用编程实践的完成情况和能力&#34;&gt;主要考核应用编程实践的完成情况和能力&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须完成的内容：课上的作业、综合编程练习&lt;/li&gt;&#xA;&lt;li&gt;每个同学必须独立完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;课件资料实验安排及通知等&#34;&gt;课件资料、实验安排及通知等&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;课堂上&lt;/li&gt;&#xA;&lt;li&gt;爱课堂、QQ群&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;答疑提交作业方式&#34;&gt;答疑、提交作业方式&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;邮箱:bupthomework@163.com&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;程序设计语言的发展&#34;&gt;程序设计语言的发展&lt;/h2&gt;&#xA;&lt;h3 id=&#34;硬件语言&#34;&gt;硬件语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器语言&lt;/li&gt;&#xA;&lt;li&gt;汇编语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;非结构化语言&#34;&gt;非结构化语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FORTRAN&lt;/li&gt;&#xA;&lt;li&gt;BASIC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;结构化的语言&#34;&gt;结构化的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PASCAL 允许嵌套&lt;/li&gt;&#xA;&lt;li&gt;C 不允许嵌套&lt;/li&gt;&#xA;&lt;li&gt;Ada&lt;/li&gt;&#xA;&lt;li&gt;Alogol&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;面向对象的语言&#34;&gt;面向对象的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Smalltalk&lt;/li&gt;&#xA;&lt;li&gt;C++&lt;/li&gt;&#xA;&lt;li&gt;Java&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;组件编程&#34;&gt;组件编程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.net&lt;/li&gt;&#xA;&lt;li&gt;C#/C++/Java&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;新出现的语言&#34;&gt;新出现的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python(动态的、面向对象的脚本语言)&lt;/li&gt;&#xA;&lt;li&gt;Go(静态强类型、编译型、并发型)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;结构化程序设计面向过程&#34;&gt;结构化程序设计（面向过程）&lt;/h2&gt;&#xA;&lt;h3 id=&#34;自顶向下逐步求精模块化&#34;&gt;自顶向下，逐步求精，模块化&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先考虑总体，后考虑细节；先考虑全局目标，后考虑局部目标&lt;/li&gt;&#xA;&lt;li&gt;对复杂问题，分解成若干简单问题，确立子目标，逐步细节化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;限制直接跳转goto的应用&#34;&gt;限制直接跳转（goto）的应用&lt;/h3&gt;&#xA;&lt;h3 id=&#34;程序算法数据结构&#34;&gt;程序=算法+数据结构&lt;/h3&gt;&#xA;&lt;h2 id=&#34;面向对象程序设计&#34;&gt;面向对象程序设计&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用对象模型来描述或解决现实世界中的问题（以对象为核心）&lt;/li&gt;&#xA;&lt;li&gt;大幅度提高软件开发的成功率，提高软件的可移植性、重用性和可靠性，减少日后的维护费用&lt;/li&gt;&#xA;&lt;li&gt;特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对象模型，对象概念再从建模到构建程序的各个方面广泛使用&lt;/li&gt;&#xA;&lt;li&gt;抽象化，对象的属性进行抽象&lt;/li&gt;&#xA;&lt;li&gt;封装性，对对象的操作被封装在特定的作用范围&lt;/li&gt;&#xA;&lt;li&gt;多态性，派生对象的操作（方法）可以存在不同实现&lt;/li&gt;&#xA;&lt;li&gt;继承性，方法和属性可以在类间被继承和传递&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;c与c的关系&#34;&gt;C++与C的关系&lt;/h2&gt;&#xA;&lt;h3 id=&#34;c源于c语言&#34;&gt;C++源于C语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;C语言是在B语言的基础上发展起来的&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机组成原理</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;bupt的计算机组成原理课的笔记&lt;/p&gt;&#xA;&lt;h2 id=&#34;成绩构成&#34;&gt;成绩构成&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件实验20%&lt;/li&gt;&#xA;&lt;li&gt;期中考试10%&lt;/li&gt;&#xA;&lt;li&gt;平时作业10%&lt;/li&gt;&#xA;&lt;li&gt;期末考试60%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第一章-计算机概述&#34;&gt;第一章 计算机概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;计算机分类和应用&#34;&gt;计算机分类和应用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;通用计算机分类&#34;&gt;通用计算机分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单片机&lt;/li&gt;&#xA;&lt;li&gt;微型机&lt;/li&gt;&#xA;&lt;li&gt;工作站&lt;/li&gt;&#xA;&lt;li&gt;服务器&lt;/li&gt;&#xA;&lt;li&gt;大型机&lt;/li&gt;&#xA;&lt;li&gt;超级计算机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;面向应用的分类&#34;&gt;面向应用的分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通用计算机：具有计算机的标准形态，通过安装不同的应用软件，以相似的外观呈现并应用在各行各业&lt;/li&gt;&#xA;&lt;li&gt;专用计算机/嵌入式计算机：安装或嵌入到交通工具、仪器仪表、控制系统、通信设备和家电产品等中的模块化计算机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机的应用领域&#34;&gt;计算机的应用领域&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;科学计算&lt;/li&gt;&#xA;&lt;li&gt;信息处理&lt;/li&gt;&#xA;&lt;li&gt;实时控制&lt;/li&gt;&#xA;&lt;li&gt;人工智能&lt;/li&gt;&#xA;&lt;li&gt;计算机辅助设计&lt;/li&gt;&#xA;&lt;li&gt;医疗保健、教育、工业制造、娱乐和游戏等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机发展简史&#34;&gt;计算机发展简史&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机的演进&#34;&gt;计算机的演进&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第0代 机械时代(BC-1940)&lt;/li&gt;&#xA;&lt;li&gt;第1代 电子管时代(1946-1957) 数据处理机&lt;/li&gt;&#xA;&lt;li&gt;第2代 晶体管时代(1958-1964) 工业控制机&lt;/li&gt;&#xA;&lt;li&gt;第3代 集成电路时代(1965-1971) 小型计算机&lt;/li&gt;&#xA;&lt;li&gt;第4代 超大规模集成电路时代(1972-1990) 微型计算机&lt;/li&gt;&#xA;&lt;li&gt;第5代 巨大规模集成电路计算机(1991年开始) 单片计算机&lt;/li&gt;&#xA;&lt;li&gt;第6代 量子计算机、光计算机、生物计算机？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;世界上第一台计算机eniac&#34;&gt;世界上第一台计算机ENIAC&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1946美国宾夕法尼亚大学&lt;/li&gt;&#xA;&lt;li&gt;Mauchly和Eckert设计&lt;/li&gt;&#xA;&lt;li&gt;十进制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ias计算机&#34;&gt;IAS计算机&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Von Neumann机，冯·诺伊曼结构计算机&lt;/li&gt;&#xA;&lt;li&gt;“存储程序”计算机&lt;/li&gt;&#xA;&lt;li&gt;1945年冯·诺伊曼/图灵同时提出“存储程序“思想&lt;/li&gt;&#xA;&lt;li&gt;采用二进制数据&lt;/li&gt;&#xA;&lt;li&gt;只实现整数运算&lt;/li&gt;&#xA;&lt;li&gt;五大功能部件，是后来通用计算机的原型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机技术飞速发展&#34;&gt;计算机技术飞速发展&lt;/h3&gt;&#xA;&lt;h3 id=&#34;硬件定律&#34;&gt;硬件定律&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信号传输速度赶不上光速&lt;/li&gt;&#xA;&lt;li&gt;内存赶不上CPU速度&lt;/li&gt;&#xA;&lt;li&gt;软件赶不上硬件&lt;/li&gt;&#xA;&lt;li&gt;Moore&amp;rsquo;s Law：集成电路芯片中晶体管数量大体上每2年翻一番，或者价格下降一半&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机的性能指标&#34;&gt;计算机的性能指标&lt;/h3&gt;&#xA;&lt;h4 id=&#34;容量&#34;&gt;容量&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地址寄存器位数N&lt;/li&gt;&#xA;&lt;li&gt;数据寄存器位数M&lt;/li&gt;&#xA;&lt;li&gt;总容量 = 存储单元个数 * 存储字长 bit = 2&lt;!-- raw HTML omitted --&gt;N&lt;!-- raw HTML omitted --&gt; * M bit&lt;/li&gt;&#xA;&lt;li&gt;K:2&lt;!-- raw HTML omitted --&gt;10&lt;!-- raw HTML omitted --&gt;, M:2&lt;!-- raw HTML omitted --&gt;20&lt;!-- raw HTML omitted --&gt;, G:2&lt;!-- raw HTML omitted --&gt;30&lt;!-- raw HTML omitted --&gt;, T:2&lt;!-- raw HTML omitted --&gt;40&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;速度&#34;&gt;速度&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器字长(处理机字长)：指处理机运算其中一次能够完成二进制数运算的位数。（一般等于内部寄存器的位数）&lt;/li&gt;&#xA;&lt;li&gt;CLK CPU的时钟周期，时钟周期越长，频率越慢 主频：主时钟的频率&lt;/li&gt;&#xA;&lt;li&gt;CPI：每条指令执行所需要的时钟周期数，或每条指令执行所需的平均时钟周期数 指令耗时=CPI*CPU时钟周期&lt;/li&gt;&#xA;&lt;li&gt;MIPS(Million Instructions Per Second)（每秒百万指令数 MIPS=(指令总数/程序执行时间)*10&lt;!-- raw HTML omitted --&gt;-6&lt;!-- raw HTML omitted --&gt;）&lt;/li&gt;&#xA;&lt;li&gt;FLOPS：每秒执行浮点操作的次数&lt;/li&gt;&#xA;&lt;li&gt;MFLOPS：每秒百万次浮点操作次数&lt;/li&gt;&#xA;&lt;li&gt;GFLOPS：每秒十亿次浮点操作次数&lt;/li&gt;&#xA;&lt;li&gt;TFLOPS：每秒万亿次浮点操作次数&lt;/li&gt;&#xA;&lt;li&gt;总线宽度：数据总线一次所能并行传送信息的位数&lt;/li&gt;&#xA;&lt;li&gt;存储器带宽：单位时间内从存储器读出的字节数，一般用字节数/秒表示&lt;/li&gt;&#xA;&lt;li&gt;吞吐量：表征一台计算机在某一时间间隔内能够处理的信息量，单位是字节/秒(B/S)&lt;/li&gt;&#xA;&lt;li&gt;响应时间：指从用户向计算机发送一个请求，到系统对该请求作出响应并获得它所需要的结果的等待时间&lt;/li&gt;&#xA;&lt;li&gt;利用率：在给定的时间间隔内系统被实际使用的时间所占的比率，用百分比表示&lt;/li&gt;&#xA;&lt;li&gt;存储器容量：存储器中所有存储单元的总数目，通常用KB、MB、GB、TB来表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机的硬件&#34;&gt;计算机的硬件&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机组成&#34;&gt;计算机组成&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机由运算器、控制器、存储器、输入设备和输出设备五大部件组成&lt;/li&gt;&#xA;&lt;li&gt;在机器内部，指令和数据均以二进制码表示&lt;/li&gt;&#xA;&lt;li&gt;机器以运算器为中心，数据传送都经过运算器&lt;/li&gt;&#xA;&lt;li&gt;存储程序式计算机&lt;/li&gt;&#xA;&lt;li&gt;基于总线的计算机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机的软件&#34;&gt;计算机的软件&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机软件分类&#34;&gt;计算机软件分类&lt;/h3&gt;&#xA;&lt;h4 id=&#34;系统程序管理整个操作系统使系统资源得到合理调度&#34;&gt;系统程序：管理整个操作系统，使系统资源得到合理调度&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统&lt;/li&gt;&#xA;&lt;li&gt;服务程序：调试程序、诊断程序、排错程序、联系程序等&lt;/li&gt;&#xA;&lt;li&gt;语言程序：汇编器、编译器、解释程序&lt;/li&gt;&#xA;&lt;li&gt;数据库管理系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;应用程序完成用户的特定任务使用系统软件提供的资源接口&#34;&gt;应用程序：完成用户的特定任务，使用系统软件提供的资源接口&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EDA设计软件&lt;/li&gt;&#xA;&lt;li&gt;数据处理软件&lt;/li&gt;&#xA;&lt;li&gt;社交娱乐&lt;/li&gt;&#xA;&lt;li&gt;办公软件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机系统的层次结构&#34;&gt;计算机系统的层次结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一级为微程序设计级(逻辑电路级)，或硬布线级。是一个实际机器层，由硬件直接执行微指令。&lt;/li&gt;&#xA;&lt;li&gt;第二级为一般机器级，也称为机器语言级。由为程序解释机器指令系统。这一级也是硬件级&lt;/li&gt;&#xA;&lt;li&gt;第三级为操作系统级。用于对计算机系统的软硬件资源进行管理和调度，也称为混合级。&lt;/li&gt;&#xA;&lt;li&gt;第四级为汇编语言级。通过汇编器将汇编程序翻译成机器指令。&lt;/li&gt;&#xA;&lt;li&gt;第五级为高级语言级。用汇编程序翻译成第四级的汇编语言程序。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;n层计算机系统层次结构&#34;&gt;n层计算机系统层次结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一层，实际计算机M1，机器语言为L1，由L1编写的程序可以直接由电子电路执行。&lt;/li&gt;&#xA;&lt;li&gt;第二层，虚拟机M2，机器语言为L2，用L2编写的程序需经运行在M1上的解释器解释指行或翻译成L1语言后执行。&lt;/li&gt;&#xA;&lt;li&gt;第三层，虚拟机M3，机器语言为L3，用L3编写的程序需经运行在M2或M1上的解释器解释执行，或翻译成L2或L1语言后执行。&lt;/li&gt;&#xA;&lt;li&gt;第四层，虚拟机M4，机器语言为L4&lt;/li&gt;&#xA;&lt;li&gt;……&lt;/li&gt;&#xA;&lt;li&gt;第n层，虚拟机Mn，起机器语言为Ln，用Ln编写的程序需经运行在更低级别的机器上的解释器解释执行，或翻译成更低级别别机器上语言后执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;软件与硬件的逻辑等价性&#34;&gt;软件与硬件的逻辑等价性&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件：能实现高速的算术逻辑运算功能，但难以实现较复杂的功能或实现的代价太高&lt;/li&gt;&#xA;&lt;li&gt;软件：易于实现各种复杂的算术逻辑运算功能，但是频繁的访存操作制约了处理速度&lt;/li&gt;&#xA;&lt;li&gt;从理论上讲，任何软件算法可以用软件实现，也可以用硬件实现&lt;/li&gt;&#xA;&lt;li&gt;对于某一具体功能，才用硬件方案还是软件方案，取决于设计目标、技术水平、器件价格、速度、可靠性、易维护性和变更周期等因素&lt;/li&gt;&#xA;&lt;li&gt;固件：现在已经可以把许多复杂的、常用的程序制作成所谓的固件。就它的功能来说，是软件；但从形态上来说，又是固件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第二章-运算方法和运算器&#34;&gt;第二章 运算方法和运算器&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数据与文字的表示方法&#34;&gt;数据与文字的表示方法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;数据编码与表示&#34;&gt;数据编码与表示&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机中的数据&lt;/li&gt;&#xA;&lt;li&gt;编码原则&lt;/li&gt;&#xA;&lt;li&gt;二进制码0、1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;无符号数和有符号数&#34;&gt;无符号数和有符号数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无符号数不带符号位&lt;/li&gt;&#xA;&lt;li&gt;有符号数带符号为，最左边的位用作符号位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机中常用的数据表示格式&#34;&gt;计算机中常用的数据表示格式&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定点格式：数值范围有限，处理简单（纯小数或纯整数） 小数点位置固定不限，不是用记号“.“来表示小数点，表示纯小数或纯整数 定点数有一位符号位&lt;/li&gt;&#xA;&lt;li&gt;浮点格式：数值范围很大，处理过程复杂&lt;/li&gt;&#xA;&lt;li&gt;十进制数格式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;真值与机器数&#34;&gt;真值与机器数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;真值是机器数代表的实际的值&lt;/li&gt;&#xA;&lt;li&gt;机器数是真值在机器中的表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数的机器码表示&#34;&gt;数的机器码表示&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将符号为和数值位一起编码&lt;/li&gt;&#xA;&lt;li&gt;小数点：隐含存储&lt;/li&gt;&#xA;&lt;li&gt;真值-机器码/机器数&lt;/li&gt;&#xA;&lt;li&gt;有符号数机器码：原码、补码、反码（方便过渡，通过原码计算补码）、移码（表示偏移值，符号位1表示正数，0表示负数）&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-05%2013.14.23.png&#34; alt=&#34;8位无符号数和有符号数的表示&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;若X为整数，则所有码制表示方法相同&lt;/li&gt;&#xA;&lt;li&gt;原码、反码、补码用1表示-，用0表示+&lt;/li&gt;&#xA;&lt;li&gt;移码用1表示+，用0表示-&lt;/li&gt;&#xA;&lt;li&gt;移码与补码的尾码相同，符号相反&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-05%2013.26.23.png&#34; alt=&#34;数据大小&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据操作&#34;&gt;数据操作&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号位扩展n-&amp;gt;n+k 填充符号位&lt;/li&gt;&#xA;&lt;li&gt;移位操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;左移1位，绝对值扩大，*2&lt;/li&gt;&#xA;&lt;li&gt;右移1位，绝对值缩小，/2&lt;/li&gt;&#xA;&lt;li&gt;算术移位的法则（有符号数的移位法则）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号位保持不动&lt;/li&gt;&#xA;&lt;li&gt;正数：原码、补码、反码均补0&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;负数：原码补0，补码左移补0、右移补1，反码补1&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浮点数的表示方法&#34;&gt;浮点数的表示方法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定点数可表示的数据范围有限，但我们不能无限制的增长数据的长度&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机网络</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;h1 id=&#34;chapter-1--introduction&#34;&gt;chapter 1  Introduction&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是计算机网络&#34;&gt;什么是计算机网络&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a group of separate but interconnected computers computers, PADs, Smart phones, Home appliances, Senors&lt;/li&gt;&#xA;&lt;li&gt;直接相连/需要中转 有线/无线&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;分布式系统与计算机网络&#34;&gt;分布式系统与计算机网络&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式系统：A collection of independent computers appears to its users as a single coherent system（单一的系统）&lt;/li&gt;&#xA;&lt;li&gt;计算机网络：A collection of autonomous(自主工作) computers interconnected by a single technology&lt;/li&gt;&#xA;&lt;li&gt;The distinction lies with software(especially the OS), rather than with the hardware.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机网络的应用&#34;&gt;计算机网络的应用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;resource-sharing&#34;&gt;Resource sharing&lt;/h3&gt;&#xA;&lt;h3 id=&#34;client-server-modelemaildnsdhcpftp&#34;&gt;Client-Server Model：Email、DNS、DHCP、FTP&lt;/h3&gt;&#xA;&lt;h3 id=&#34;business-applications&#34;&gt;Business Applications&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Communication medium&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email, VoIP, video conferencing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;QoS(Quality of Service)&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;latency (or delay), jitter, bandwidth&lt;/li&gt;&#xA;&lt;li&gt;bit-error-rate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Electronic commerce&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Airlines, bookstores, shopping carts,…&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;home-applications&#34;&gt;Home Applications&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Access to remote information&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://y-m-m.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;绪论&#34;&gt;绪论&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cc常见问题&#34;&gt;C/C++常见问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;switch-case语句&#34;&gt;switch-case语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;switch之后的case遇到break才会停止&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;static的作用&#34;&gt;static的作用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态函数：只能在定义它的文件中使用&lt;/li&gt;&#xA;&lt;li&gt;静态变量：初始值为0，在程序运行期间一直存在&lt;/li&gt;&#xA;&lt;li&gt;静态代码块：只有在函数第一次被调用时才会运行&lt;/li&gt;&#xA;&lt;li&gt;缺省情况下全局可见&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;优先级&#34;&gt;优先级&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.的优先级高于*和-&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;[]的优先级高于*&lt;/li&gt;&#xA;&lt;li&gt;()的优先级高于*&lt;/li&gt;&#xA;&lt;li&gt;!=和==的优先级高于位运算&lt;/li&gt;&#xA;&lt;li&gt;算术运算的优先级高于位运算&lt;/li&gt;&#xA;&lt;li&gt;逗号在所有运算符中优先级最低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;const和的不同位置表示的含义&#34;&gt;const和*的不同位置表示的含义&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;const在*之前(const int *a; int const *b)，指针所指对象只读&lt;/li&gt;&#xA;&lt;li&gt;const在*之后(int *const c;)，指针只读&lt;/li&gt;&#xA;&lt;li&gt;const在*之前和之后都有(const int * const d; int const *const e;)，指针和指针所指对象只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;传值传址传引用&#34;&gt;传值、传址、传引用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传值：function(x)/void function(int x)&lt;/li&gt;&#xA;&lt;li&gt;传址：function(&amp;amp;x)/void function(int *x)&lt;/li&gt;&#xA;&lt;li&gt;传引用：function(x)/void function(int &amp;amp;x)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基本概念和术语&#34;&gt;基本概念和术语&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据：对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。&lt;/li&gt;&#xA;&lt;li&gt;数据元素：数据的基本单位，是数据结合中的一个个体，一个数据元素可由若干个数据项组成。&lt;/li&gt;&#xA;&lt;li&gt;数据对象：性质相同的数据元素的集合，是数据的一个子集。&lt;/li&gt;&#xA;&lt;li&gt;数据结构：相互之间存在一种或多种特定关系的数据元素的集合。&lt;/li&gt;&#xA;&lt;li&gt;数据结构：(D,S,Op)。其中D位数据元素的集合；S为D上的关系Op为定义在D上的运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;数据结构的分类&#34;&gt;数据结构的分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集合&lt;/li&gt;&#xA;&lt;li&gt;线性结构&lt;/li&gt;&#xA;&lt;li&gt;树形结构&lt;/li&gt;&#xA;&lt;li&gt;图状结构或网状结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;逻辑结构&#34;&gt;逻辑结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据元素之间的逻辑关系&lt;/li&gt;&#xA;&lt;li&gt;(D, S)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;操作&#34;&gt;操作&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构造函数、析构函数&lt;/li&gt;&#xA;&lt;li&gt;询问类操作：判空、求长度&lt;/li&gt;&#xA;&lt;li&gt;查找类操作：查找某个元素的位置、遍历&lt;/li&gt;&#xA;&lt;li&gt;添加和删除类操作：添加一个数据元素、删除一个数据元素、置空&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;存储结构物理结构&#34;&gt;存储结构（物理结构）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据的逻辑结构在计算机存储器中的映像表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据元素的映像&#34;&gt;数据元素的映像&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用二进制位的位串表示数据元素&lt;/li&gt;&#xA;&lt;li&gt;每个数据元素的映像称为结点&lt;/li&gt;&#xA;&lt;li&gt;每个数据项的映像称为数据域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;不同的存储结构&#34;&gt;不同的存储结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顺序存储结构&lt;/li&gt;&#xA;&lt;li&gt;链式存储结构&lt;/li&gt;&#xA;&lt;li&gt;哈希存储结构（散列存储结构）&lt;/li&gt;&#xA;&lt;li&gt;索引存储结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;刻画（程序）操作对象的特性&lt;/li&gt;&#xA;&lt;li&gt;原子类型&lt;/li&gt;&#xA;&lt;li&gt;结构类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;抽象数据类型adt&#34;&gt;抽象数据类型（ADT）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个数学模型以及定义在该模型上的一组操作&lt;/li&gt;&#xA;&lt;li&gt;原子类型&lt;/li&gt;&#xA;&lt;li&gt;固定聚合类型&lt;/li&gt;&#xA;&lt;li&gt;可变聚合类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;算法的基本概念&#34;&gt;算法的基本概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;算法需要满足的特性&#34;&gt;算法需要满足的特性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有穷性、确定性、可行性、输入、输出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法设计自顶向下逐步求精&#34;&gt;算法设计：自顶向下、逐步求精&lt;/h3&gt;&#xA;&lt;h3 id=&#34;算法的评价标准&#34;&gt;算法的评价标准&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正确性&lt;/li&gt;&#xA;&lt;li&gt;可读性&lt;/li&gt;&#xA;&lt;li&gt;健壮性&lt;/li&gt;&#xA;&lt;li&gt;高效率与地存储量需求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法的后续测试&#34;&gt;算法的后续测试&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在算法中的某些部位插入时间函数time(t)测定算法完成某一功能所需要华为的时间(打印t)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法的事前估计&#34;&gt;算法的事前估计&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;空间复杂度（原地工作：额外空间相对于输入数据量来说是常数）&lt;/p&gt;</description>
    </item>
    <item>
      <title>csapp</title>
      <link>https://y-m-m.github.io/post/csapp/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/csapp/</guid>
      <description>&lt;h1 id=&#34;计算机系统漫游&#34;&gt;计算机系统漫游&lt;/h1&gt;&#xA;&lt;h2 id=&#34;文件的分类&#34;&gt;文件的分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;像hello.c这样只由ASCII字符构成的文件称文本文件&lt;/li&gt;&#xA;&lt;li&gt;所有其他文件都成为二进制文件&lt;/li&gt;&#xA;&lt;li&gt;系统中的所有信息都是由一串比特表示的，区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;文件就是字节序列，每个I/O设备都可以看成文件&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;从源文件到目标文件的转化&#34;&gt;从源文件到目标文件的转化&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;hello.c&amp;ndash;(预处理cpp)&amp;ndash;&amp;gt;hello.i&amp;ndash;(编译器ccl)&amp;ndash;&amp;gt;hello.s&amp;ndash;(汇编器as)&amp;ndash;&amp;gt;hello.o&amp;ndash;(链接器ld)&amp;ndash;&amp;gt;hello&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;系统的硬件组成&#34;&gt;系统的硬件组成&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;总线：传送字&lt;/li&gt;&#xA;&lt;li&gt;I/O设备：键盘、鼠标、显示器、磁盘&lt;/li&gt;&#xA;&lt;li&gt;主存：临时存储设备，由一组动态随机存取存储器（DRAM）芯片组成&lt;/li&gt;&#xA;&lt;li&gt;处理器：CPU，核心为PC（任何时候，PC都指向主存中的某条机器语言指令的地址）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;信息的表示和处理&#34;&gt;信息的表示和处理&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字数据的大小&#34;&gt;字数据的大小&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于一个字长为w的机器而言，虚拟地址的范围是0~2&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;-1，程序最多访问2&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;个字节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;向后兼容&#34;&gt;向后兼容&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linux&amp;gt; gcc -m32 prog.c可以在32位或64位的机器上正确运行&lt;/li&gt;&#xA;&lt;li&gt;linux&amp;gt; gcc -m64 prog.c只能在64位的机器上运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;寻址和字节顺序&#34;&gt;寻址和字节顺序&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小端法：最低有效字节在前&lt;/li&gt;&#xA;&lt;li&gt;大端法：最高有效字节在前&lt;/li&gt;&#xA;&lt;li&gt;网络应用程序的代码编写必须遵守已建立的关于字节顺序的规则，确保发送方机器将它的内部表示转换成网络标准，而接收方机器则将网络标准转换为内部表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基于c数据类型的典型大小以字节为单位&#34;&gt;基于C数据类型的典型大小（以字节为单位）&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;有符号C声明&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;无符号C声明&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;32位字节数&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;64位字节数&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;[signed] char&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned char&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;short&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned short&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;int&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;long&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned long&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;int32_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;uint32_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;int64_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;uint64_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;char *&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;float&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;double&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;布尔代数&#34;&gt;布尔代数&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;运算符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;~&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;非&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;amp;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;与&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;｜&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;或&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;^&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;异或&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;也可在C语言中使用，作为按位运算操作符&lt;/li&gt;&#xA;&lt;li&gt;按位运算用法：掩码运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;c语言逻辑运算符&#34;&gt;C语言逻辑运算符&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;运算符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;｜｜&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;或&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;amp;&amp;amp;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;与&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;！&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;非&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;移位运算&#34;&gt;移位运算&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;符号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;laquo;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;左移&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;raquo;(逻辑右移)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;左补0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;raquo;(算术右移)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;左补符号位&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;x&amp;raquo;3与x/8不相等，移位操作向下舍入，除法操作向0舍入&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;整数的数据与算数操作术语&#34;&gt;整数的数据与算数操作术语&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;符号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;B2T&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;二进制转补码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;B2U&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;二进制转无符号数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;U2B&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数转二进制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;U2T&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号转补码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;T2B&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码转二进制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;T2U&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码转无符号数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TMin&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;常数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;最小补码值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;常数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;最大补码值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;UMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;常数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;最大无符号数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;+&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;t&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码加法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;+&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;u&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数加法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;*&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;t&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码乘法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;*&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;u&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数乘法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;t&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码取反&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;u&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数取反&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下表w表示数据表示中的位数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;补码编码&#34;&gt;补码编码&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最高位为负权&lt;/li&gt;&#xA;&lt;li&gt;不对称性：|TMin| = |Tmax| + 1&lt;/li&gt;&#xA;&lt;li&gt;UMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt; = 2TMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt; + 1&lt;/li&gt;&#xA;&lt;li&gt;C库中的文件&amp;lt;limits.h&amp;gt;定义了常量INT_MAX,INT_MIN,UINT_MAX&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;反码和原码&#34;&gt;反码和原码&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;反码：最高有效位的权是-(2&lt;!-- raw HTML omitted --&gt;w-1&lt;!-- raw HTML omitted --&gt;-1)而不是-2&lt;!-- raw HTML omitted --&gt;w-1&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;原码：最高有效位是符号位，用来确定剩下的位该取负权还是正权&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;强制类型转换显式&#34;&gt;强制类型转换（显式）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保持了位模式不变，只是改变了解释这些位的方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;隐式类型转换&#34;&gt;隐式类型转换&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于同时包含有符号和无符号数表达式的处理方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;表达式&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;求值&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0==0U&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&amp;lt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&amp;lt;0U&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2147483647&amp;gt;-2147483647-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2147483647U&amp;gt;-2147483647-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;214743647&amp;gt;(int)2147483648U&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&amp;gt;-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(unsigned)-1&amp;gt;-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;c语言中tmin的写法&#34;&gt;C语言中TMin的写法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;#define INT_MAX 2147483647&lt;/li&gt;&#xA;&lt;li&gt;#define INT_MAX (-INT_MAX - 1)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;扩展一个数字的位表示&#34;&gt;扩展一个数字的位表示&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无符号数的零扩展&lt;/li&gt;&#xA;&lt;li&gt;补码数的符号扩展&lt;/li&gt;&#xA;&lt;li&gt;例：short sx; (unsigned) sx == (unsigned) (int) sx ,不等价于(unsigned)(unsigned short)sx，即默认先进行符号扩展，再强制类型转换为无符号数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;截断数字&#34;&gt;截断数字&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将一个w位的数字截断为一个k位的数字时，会丢弃高位的w-k位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ieee浮点表示&#34;&gt;IEEE浮点表示&lt;/h2&gt;&#xA;&lt;h3 id=&#34;v---1supssup---m--2supesup&#34;&gt;V = (-1)&lt;!-- raw HTML omitted --&gt;s&lt;!-- raw HTML omitted --&gt;  * M * 2&lt;!-- raw HTML omitted --&gt;E&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号s决定这个数是负数（s=1）还是正数（s=0），而对于数值0的符号位解释作为特殊情况处理&lt;/li&gt;&#xA;&lt;li&gt;尾数 M是一个二进制小数&lt;/li&gt;&#xA;&lt;li&gt;阶码 E的作用是对浮点数加权，这个权重是2的E次幂（可能是负数）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浮点数的位划分&#34;&gt;浮点数的位划分&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一位：符号位&lt;/li&gt;&#xA;&lt;li&gt;k位的阶码字段e（folat：1 8 23，double：1 11 52）&lt;/li&gt;&#xA;&lt;li&gt;n位小数字段编码尾数frac&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;被编码的值分类&#34;&gt;被编码的值分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;规格化的 e != 0 &amp;amp;&amp;amp; e != 255，E = e - bias, M = 1.frac(float:127, double:1023)&lt;/li&gt;&#xA;&lt;li&gt;非规格化的 e = 0，E = 1 - bias, M = 0.frac(提供了一个表示0的方法，表示非常接近0的数)&lt;/li&gt;&#xA;&lt;li&gt;无穷大 e = 255 &amp;amp;&amp;amp; frac = 0&lt;/li&gt;&#xA;&lt;li&gt;NaN e = 255 &amp;amp;&amp;amp; frac != 0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;寄存器&#34;&gt;寄存器&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;63&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;31&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;15&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;7&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rax&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%eax&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ax&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%al&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;返回值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rbx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ebx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rcx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ecx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%cx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%cl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第4个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rdx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%edx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%dx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%dl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第3个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rsi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%esi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%si&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%sil&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第2个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rdi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%edi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%di&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%dil&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第1个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rbp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ebp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bpl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rsp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%esp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%sp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%spl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;栈指针&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第5个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第6个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;操作数指示符&#34;&gt;操作数指示符&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;格式&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;操作数值&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;名称&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$Imm&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即数寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;寄存器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;r&lt;!-- raw HTML omitted --&gt;a&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;R[r&lt;!-- raw HTML omitted --&gt;a&lt;!-- raw HTML omitted --&gt;]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;寄存器寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;绝对寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(r&lt;!-- raw HTML omitted --&gt;a&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;间接寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(基址+偏移量)寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;, r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;, r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(, r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;, s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(,r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;,s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;,r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;,s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;,r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;,s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;数据传输指令&#34;&gt;数据传输指令&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;指令两端不能同时操作内存&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
