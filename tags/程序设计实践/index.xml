<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序设计实践 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</link>
    <description>Recent content in 程序设计实践 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 09 Oct 2024 09:34:27 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>程序设计实践</title>
      <link>https://y-m-m.github.io/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;张海滨&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;mailto:zhanghb@bupt.edu.cn&#34;&gt;zhanghb@bupt.edu.cn&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;教材&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序设计实践 The Practice of Programming 人民邮电出版社&lt;/li&gt;&#xA;&lt;li&gt;程序设计实践 机械工业出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;20学时 10周讲解相关知识；12学时大作业，验收&lt;/li&gt;&#xA;&lt;li&gt;课程内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;风格&lt;/li&gt;&#xA;&lt;li&gt;设计与实现&lt;/li&gt;&#xA;&lt;li&gt;接口&lt;/li&gt;&#xA;&lt;li&gt;排错&lt;/li&gt;&#xA;&lt;li&gt;测试&lt;/li&gt;&#xA;&lt;li&gt;性能&lt;/li&gt;&#xA;&lt;li&gt;可移植性&lt;/li&gt;&#xA;&lt;li&gt;记法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;考核方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;平时成绩 小作业 30%&lt;/li&gt;&#xA;&lt;li&gt;大作业 70%&lt;/li&gt;&#xA;&lt;li&gt;均提交至教学云平台，大作业需验收&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;大作业&#xA;&lt;ul&gt;&#xA;&lt;li&gt;题目：基于领域特定语言的客服机器人的设计与实现&lt;/li&gt;&#xA;&lt;li&gt;描述：领域特定语言(DSL)可以提供一种相对简单的文法，用于特定领域的业务流程定制。本作业要求定义一个领域特定脚本语言，这个语言能够描述在线客服机器人(机器人客服是目前提升客服效率的重要技术，在银行、通信和商务等领域的复杂信息系统中有广泛的应用)的自动应答逻辑，并设计实现一个解释器解释执行这个脚本，可以根据用户的不同输入，根据脚本的逻辑设计给出相应的应答&lt;/li&gt;&#xA;&lt;li&gt;基本要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;脚本语言的语法可以自由定义，只要与以上满足客服机器人自动应答逻辑的要求&lt;/li&gt;&#xA;&lt;li&gt;程序输入输出形式不限，可以简化为纯命令行界面&lt;/li&gt;&#xA;&lt;li&gt;应该输出几种不同的脚本范例，对不同范例解释执行之后会有不同的行为表现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;评分标准&#xA;&lt;ul&gt;&#xA;&lt;li&gt;风格15分，代码注释6分，命名6分，其它3分&lt;/li&gt;&#xA;&lt;li&gt;设计和实现30分，其中数据结构7分，模块划分7分，功能8分，文档8分&lt;/li&gt;&#xA;&lt;li&gt;接口15分，程序间接口8分，人机接口7分&lt;/li&gt;&#xA;&lt;li&gt;测试30分，测试桩15分，自动测试脚本15分&lt;/li&gt;&#xA;&lt;li&gt;记法10分，文档中对此脚本语言的语法的准确描述&lt;/li&gt;&#xA;&lt;li&gt;抄袭或有意被抄袭0分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;养成使用版本管理工具的习惯&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第一章-风格style&#34;&gt;第一章 风格style&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码风格因人而异&lt;/li&gt;&#xA;&lt;li&gt;有争议的风格&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遵从你所在组织的规范&lt;/li&gt;&#xA;&lt;li&gt;与同一个文件中其他代码风格保持一致&lt;/li&gt;&#xA;&lt;li&gt;与同一项目里其他文件的风格尽量保持一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;无争议的风格：命名风格，表达式和语句的风格，一致性和习惯用法，函数宏定义，避免神秘的数，注释风格等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;程序的风格&#34;&gt;程序的风格&lt;/h2&gt;&#xA;&lt;h3 id=&#34;命名的风格&#34;&gt;命名的风格&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;名字要准确的表达用途&lt;/li&gt;&#xA;&lt;li&gt;名字不是越长越好&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局变量可以用具有描述意义的长名字&lt;/li&gt;&#xA;&lt;li&gt;局部变量用短名字会显得程序更简洁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;类的成员的名字，不要再啰嗦重复类名&lt;/li&gt;&#xA;&lt;li&gt;用动词或者动词+名次定义函数名&lt;/li&gt;&#xA;&lt;li&gt;返回布尔值的函数名应该是一个命题，通常使用is作为函数名中的动词&lt;/li&gt;&#xA;&lt;li&gt;名字尽可能简单明了，不要用“否定之否定”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;表达式和语句&#34;&gt;表达式和语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用表达式的自然形式，即常见的易于理解的形式&lt;/li&gt;&#xA;&lt;li&gt;利用括号排除歧义，即使语法上不要求括号，也建议加上括号以便提高代码可读性&lt;/li&gt;&#xA;&lt;li&gt;分解复杂的表达式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;一致性和习惯用法&#34;&gt;一致性和习惯用法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用一致的缩进和花括号风格(例如两行以上一定加花括号)&lt;/li&gt;&#xA;&lt;li&gt;使用大多数人最习惯的用法(for循环)&lt;/li&gt;&#xA;&lt;li&gt;用else if处理多路选择，一个判断尽可能接近它所对应的动作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;函数宏&#34;&gt;函数宏&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免宏定义参数中写很多东西。函数宏的缺点，直接替换，导致用到两次的参数被替换两次，执行两次，可能直接导致错误&lt;/li&gt;&#xA;&lt;li&gt;函数宏的缺点，直接替换，导致用到两次的参数会被替换两次，执行两次，也可能导致性能错误&lt;/li&gt;&#xA;&lt;li&gt;如果一定要用函数宏，不要吝啬括号&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ 尽可能使用inline函数&lt;/li&gt;&#xA;&lt;li&gt;Java根本不支持函数宏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;神秘的数&#34;&gt;神秘的数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给所有数字起一个名字&lt;/li&gt;&#xA;&lt;li&gt;直接使用字符形式的常量，不要使用它的整数形式&lt;/li&gt;&#xA;&lt;li&gt;利用语言去计算对象的大小，从而减少代码修改负担，提高代码简洁性，可以定义一个通用的宏&lt;/li&gt;&#xA;&lt;li&gt;尽可能让编译器来计算数值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;注释的风格&#34;&gt;注释的风格&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注释与代码要始终保持一致&lt;/li&gt;&#xA;&lt;li&gt;不要写没用的注释&lt;/li&gt;&#xA;&lt;li&gt;用好的命名代替注释&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用注释自动生成文档&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;阿里代码规约&#34;&gt;阿里代码规约&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/p3c&#34;&gt;https://github.com/alibaba/p3c&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
