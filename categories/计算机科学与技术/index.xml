<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机科学与技术 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 计算机科学与技术 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Oct 2024 09:30:48 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python I/O程序的输入输出</title>
      <link>https://y-m-m.github.io/post/python_io/</link>
      <pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/python_io/</guid>
      <description>&lt;h1 id=&#34;用户输入&#34;&gt;用户输入&lt;/h1&gt;&#xA;&lt;h2 id=&#34;input的工作原理&#34;&gt;input()的工作原理&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;让程序暂停运行，等待用户输入一些文本，获取用户输入后，Python将其赋值给一个变量，以便你使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参数&#34;&gt;参数&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;接受一个参数——要向用户显示的提示或说明&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Please enter your name:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;特别的用法&#34;&gt;特别的用法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用int()来获取数值输入(也可使用float()等)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Please enter your name:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;将一连串以空格分隔的数字分别转换存储至不同的变量中(以string的形式)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;涉及到的函数&#34;&gt;涉及到的函数&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;str.split(sep = None, maxsplit = -1)函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对字符串进行的分隔操作&lt;/li&gt;&#xA;&lt;li&gt;按指定的分隔符sep对字符串str进行拆分，并把拆分结果存储到一个列表里；如果未指定sep，则默认以空白符作为分隔符(&amp;rsquo; &amp;lsquo;, &amp;lsquo;\r&amp;rsquo;, &amp;lsquo;\n&amp;rsquo;, &amp;lsquo;\t&amp;rsquo;, &amp;lsquo;\v&amp;rsquo;, &amp;lsquo;\f&amp;rsquo;)作为分隔符&lt;/li&gt;&#xA;&lt;li&gt;如果给出了maxsplit，则最多进行maxsplit次操作；如果未制定maxsplit，则拆分次数不限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;程序输出&#34;&gt;程序输出&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;print()函数&lt;/li&gt;&#xA;&lt;li&gt;默认在末尾添加换行符&lt;/li&gt;&#xA;&lt;li&gt;如果不想添加使用换行符结尾，可添加end参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;例子-1&#34;&gt;例子&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 打印变量case里的内容，在结尾添加&amp;#39;,&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;特别的用法-1&#34;&gt;特别的用法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保留指定位数小数的浮点数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tax&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 打印数字(变量tax)，保留两位小数，遵循四舍六入五成双原则&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 注意，如果在&amp;#34;tax:&amp;#34;之后添加空格的话，最后打印出来的数字之前也会有空格&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《python编程 从入门到实践》第2版&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; unorderedmap的用法</title>
      <link>https://y-m-m.github.io/post/c&#43;&#43;unorderedmap/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/c&#43;&#43;unorderedmap/</guid>
      <description>&lt;h1 id=&#34;什么是unorderedmap&#34;&gt;什么是unorderedmap？&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个关联容器，包含具有唯一键的键值对&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;使用unorderdmap有什么好处&#34;&gt;使用unorderdmap有什么好处？&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;元素的搜索、插入和删除时间复杂度O(1)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;原理是什么&#34;&gt;原理是什么？&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在内部，元素不按任何特定顺序排序，而是组织到存储桶中&lt;/li&gt;&#xA;&lt;li&gt;元素放入哪个存储桶完全取决于其键的哈希值，具有相同哈希码的键出现在同一个存储桶中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;如何使用&#34;&gt;如何使用？&lt;/h1&gt;&#xA;&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unordered_map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#FF0000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GREEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#00FF00&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BLUE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#0000FF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;相关函数&#34;&gt;相关函数&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;operator= 为容器赋值&lt;/li&gt;&#xA;&lt;li&gt;begin/cbegin 返回指向开头的iterator&lt;/li&gt;&#xA;&lt;li&gt;end/cend 返回指向结尾的迭代器&lt;/li&gt;&#xA;&lt;li&gt;empty 检查容器是否为空&lt;/li&gt;&#xA;&lt;li&gt;size 返回元素的数目&lt;/li&gt;&#xA;&lt;li&gt;clear 清空容器&lt;/li&gt;&#xA;&lt;li&gt;insert 插入元素或节点(C++17以后)&lt;/li&gt;&#xA;&lt;li&gt;insert_range(C++23) 插入一系列元素&lt;/li&gt;&#xA;&lt;li&gt;erase 擦除元素&lt;/li&gt;&#xA;&lt;li&gt;extract(C++17) 从其他容器中提取节点&lt;/li&gt;&#xA;&lt;li&gt;merge(C++17) 从其他容器中接入节点&lt;/li&gt;&#xA;&lt;li&gt;operator[] 获取特定元素&lt;/li&gt;&#xA;&lt;li&gt;count 返回能匹配到特定key的元素数目&lt;/li&gt;&#xA;&lt;li&gt;find 根据key寻找元素&lt;/li&gt;&#xA;&lt;li&gt;bucket_count 返回桶的数目&lt;/li&gt;&#xA;&lt;li&gt;max_bucket_count 返回最大的桶的数目&lt;/li&gt;&#xA;&lt;li&gt;bucket_size 返回指定桶的大小&lt;/li&gt;&#xA;&lt;li&gt;bucket 返回指定的桶&lt;/li&gt;&#xA;&lt;li&gt;load_factor 返回每个桶拥有的元素的数目的平均数&lt;/li&gt;&#xA;&lt;li&gt;hash_function 返回对key进行操作的哈希函数&lt;/li&gt;&#xA;&lt;li&gt;operator==(C++11)&lt;/li&gt;&#xA;&lt;li&gt;operator!=(C++11)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;特别的用法&#34;&gt;特别的用法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;operator[]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;unordered_map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashtable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;hashtable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 相当于添加(1, 2)这个元素&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;例题&#34;&gt;例题&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/two-sum/description/&#34;&gt;leetcode 1.两数之和&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/cpp/container/unordered_map&#34;&gt;cppreference&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 3164 优质对的总数二</title>
      <link>https://y-m-m.github.io/post/leetcode3164%E4%BC%98%E8%B4%A8%E5%AF%B9%E7%9A%84%E6%80%BB%E6%95%B0%E4%BA%8C/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode3164%E4%BC%98%E8%B4%A8%E5%AF%B9%E7%9A%84%E6%80%BB%E6%95%B0%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;题目&#34;&gt;题目&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-the-number-of-good-pairs-ii/description/&#34;&gt;leetcode 3164 优质对的总数二&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;给你两个整数数组 nums1 和 nums2，长度分别为 n 和 m。同时给你一个正整数 k。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果 nums1[i] 可以被 nums2[j] * k 整除，则称数对 (i, j) 为 优质数对（0 &amp;lt;= i &amp;lt;= n - 1, 0 &amp;lt;= j &amp;lt;= m - 1）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;返回 优质数对 的总数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;&#xA;&lt;h2 id=&#34;示例一&#34;&gt;示例一&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;输入：nums1 = [1,3,4], nums2 = [1,3,4], k = 1&#xA;输出：5&#xA;解释：&#xA;5个优质数对分别是 (0, 0), (1, 0), (1, 1), (2, 0), 和 (2, 2)。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;题解&#34;&gt;题解&lt;/h1&gt;&#xA;&lt;h2 id=&#34;方法一&#34;&gt;方法一&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numberOfPairs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;682/687个通过的测试样例&lt;/li&gt;&#xA;&lt;li&gt;超出时间限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;暴力求解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;方法二力扣官方题解&#34;&gt;方法二(力扣官方题解)&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numberOfPairs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;unordered_map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;unordered_map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// nums1中的最大的数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;store_nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;max1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;store_nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_nums2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 遍历num2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;store_nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 在num1中能找到num2[i]*k的倍数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1L&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_nums1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用&lt;a href=&#34;https://y-m-m.github.io/post/c++unorderedmap/&#34;&gt;unordered_map&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;对于store_nums2中的每个数字乘以k，利用unordered_map直接在nums1中寻找其倍数，而不是遍历store_nums1与store_nums2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-the-number-of-good-pairs-ii/solutions/&#34;&gt;力扣官方题解&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 3171 找到按位或最接近k的子数组</title>
      <link>https://y-m-m.github.io/post/leetcode3171%E6%89%BE%E5%88%B0%E6%8C%89%E4%BD%8D%E6%88%96%E6%9C%80%E6%8E%A5%E8%BF%91k%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode3171%E6%89%BE%E5%88%B0%E6%8C%89%E4%BD%8D%E6%88%96%E6%9C%80%E6%8E%A5%E8%BF%91k%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;h1 id=&#34;题目&#34;&gt;题目&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给你一个数组 nums 和一个整数 k 。&lt;/li&gt;&#xA;&lt;li&gt;你需要找到 nums 的一个子数组，满足子数组中所有元素按位或运算 OR 的值与 k 的 绝对差 尽可能 小 。&lt;/li&gt;&#xA;&lt;li&gt;换言之，你需要选择一个子数组 nums[l..r] 满足 |k - (nums[l] OR nums[l + 1] &amp;hellip; OR nums[r])| 最小。&lt;/li&gt;&#xA;&lt;li&gt;请你返回 最小 的绝对差值。&lt;/li&gt;&#xA;&lt;li&gt;子数组 是数组中连续的 非空 元素序列。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;&#xA;&lt;h2 id=&#34;示例1&#34;&gt;示例1&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：nums = [1,2,4,5], k = 3&lt;/li&gt;&#xA;&lt;li&gt;输出：0&lt;/li&gt;&#xA;&lt;li&gt;解释：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;子数组 nums[0..1] 的按位 OR 运算值为 3 ，得到最小差值 |3 - 3| = 0 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例2&#34;&gt;示例2&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：nums = [1,3,1,3], k = 2&lt;/li&gt;&#xA;&lt;li&gt;输出：1&lt;/li&gt;&#xA;&lt;li&gt;解释：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;子数组 nums[1..1] 的按位 OR 运算值为 3 ，得到最小差值 |3 - 2| = 1 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例3&#34;&gt;示例3&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：nums = [1], k = 10&lt;/li&gt;&#xA;&lt;li&gt;输出：9&lt;/li&gt;&#xA;&lt;li&gt;解释：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有一个子数组，按位 OR 运算值为 1 ，得到最小差值 |10 - 1| = 9 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;提示&#34;&gt;提示&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;5&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= nums[i] &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;9&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= k &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;9&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;相关标签&#34;&gt;相关标签&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;位运算&lt;/li&gt;&#xA;&lt;li&gt;线段树&lt;/li&gt;&#xA;&lt;li&gt;数组&lt;/li&gt;&#xA;&lt;li&gt;二分查找&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;难度&#34;&gt;难度&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;困难&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;题解&#34;&gt;题解&lt;/h1&gt;&#xA;&lt;h2 id=&#34;解法一&#34;&gt;解法一&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;minimumDifference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;or_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;or_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;or_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;or_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now_differ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;or_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now_differ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now_differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;or_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_differ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;min_differ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min_differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_differ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;758/813个通过的测试样例&lt;/li&gt;&#xA;&lt;li&gt;解答错误&lt;/li&gt;&#xA;&lt;li&gt;例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入&#xA;&lt;ul&gt;&#xA;&lt;li&gt;nums = [10,75,60,36,17]&lt;/li&gt;&#xA;&lt;li&gt;k = 54&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;输出&#xA;&lt;ul&gt;&#xA;&lt;li&gt;6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;预期结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0001010 10 &#xA;1001011 75&#xA;0111100 60&#xA;0100100 36&#xA;0010001 17&#xA;&#xA;0110110 k&#xA;&#xA;60 | 36 = 0111100&#xA;60 | 36 | 17 = 0111101&#xA;36 | 17 = 0110101&#xA;&#xA;显然 36|17 更接近k，但相比较36而言，60 | 36更接近k，故36的位置存储的应该是60 | 36，因此，在之后的17的位置只会比较60|36|17 与 17，无法得到36|17&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;联想到最大子段和问题，考虑使用动态规划&lt;/li&gt;&#xA;&lt;li&gt;以i遍历数组，以当前i结尾的最优子数组，为 以i-1结尾的最优子数组｜i 和 i 这两者中的更优者&lt;/li&gt;&#xA;&lt;li&gt;出现问题的原因：随着或的次数的增加，与k的差的绝对值并非单调递减&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; unorderedset的用法</title>
      <link>https://y-m-m.github.io/post/c&#43;&#43;unorderedset/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/c&#43;&#43;unorderedset/</guid>
      <description>&lt;h1 id=&#34;什么是unordered_set&#34;&gt;什么是unordered_set?&lt;/h1&gt;&#xA;&lt;p&gt;unordered_set是一个基于Hash算法实现的set&lt;/p&gt;&#xA;&lt;h1 id=&#34;使用unordered_set有什么好处&#34;&gt;使用unordered_set有什么好处？&lt;/h1&gt;&#xA;&lt;p&gt;查找、插入、删除的时间复杂度均为O(1)&lt;/p&gt;&#xA;&lt;h1 id=&#34;unordered_set如何使用&#34;&gt;unordered_set如何使用？&lt;/h1&gt;&#xA;&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;unordered_set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;citiesA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;有哪些常用成员函数&#34;&gt;有哪些常用成员函数?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;operator= 赋值&lt;/li&gt;&#xA;&lt;li&gt;begin/cbegin 返回第一个元素的迭代器&lt;/li&gt;&#xA;&lt;li&gt;end/cend 返回最后一个成员的迭代器&lt;/li&gt;&#xA;&lt;li&gt;empty 检查是否为空&lt;/li&gt;&#xA;&lt;li&gt;size 返回元素的数目&lt;/li&gt;&#xA;&lt;li&gt;max_size 返回最大的可能的元素数目&lt;/li&gt;&#xA;&lt;li&gt;clear 清空内容&lt;/li&gt;&#xA;&lt;li&gt;insert 插入元素&lt;/li&gt;&#xA;&lt;li&gt;insert_range(C++23) 插入一系列元素&lt;/li&gt;&#xA;&lt;li&gt;erase 删除元素&lt;/li&gt;&#xA;&lt;li&gt;emplace 在指定位置构建元素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;例题&#34;&gt;例题&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/destination-city/description/&#34;&gt;leetcode1436旅行终点站&lt;/a&gt;&#xA;&lt;a href=&#34;https://y-m-m.github.io/post/leetcode2306%E5%85%AC%E5%8F%B8%E5%91%BD%E5%90%8D/&#34;&gt;leetcode2306公司命名&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/cpp/container/unordered_set&#34;&gt;cppreference.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 871 最低加油次数</title>
      <link>https://y-m-m.github.io/post/leetcode871%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode871%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-number-of-refueling-stops/description/&#34;&gt;leetcode 871 最低加油次数&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;题目&#34;&gt;题目&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;汽车从起点出发驶向目的地，该目的地位于出发位置东面 target 英里处。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;沿途有加油站，用数组 stations 表示。其中 stations[i] = [position&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;, fuel&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;] 表示第 i 个加油站位于出发位置东面 position&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; 英里处，并且有 fuel&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; 升汽油。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;假设汽车油箱的容量是无限的，其中最初有 startFuel 升燃料。它每行驶 1 英里就会用掉 1 升汽油。当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 -1 。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。&lt;/p&gt;&#xA;&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;&#xA;&lt;h2 id=&#34;示例一&#34;&gt;示例一&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：target = 1, startFuel = 1, stations = []&lt;/li&gt;&#xA;&lt;li&gt;输出：0&lt;/li&gt;&#xA;&lt;li&gt;解释：可以在不加油的情况下到达目的地。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例二&#34;&gt;示例二&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：target = 100, startFuel = 1, stations = [[10,100]]&lt;/li&gt;&#xA;&lt;li&gt;输出：-1&lt;/li&gt;&#xA;&lt;li&gt;解释：无法抵达目的地，甚至无法到达第一个加油站。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例三&#34;&gt;示例三&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]&lt;/li&gt;&#xA;&lt;li&gt;输出：2&lt;/li&gt;&#xA;&lt;li&gt;解释：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;出发时有 10 升燃料。&lt;/li&gt;&#xA;&lt;li&gt;开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。&lt;/li&gt;&#xA;&lt;li&gt;然后，从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），&lt;/li&gt;&#xA;&lt;li&gt;并将汽油从 10 升加到 50 升。然后开车抵达目的地。&lt;/li&gt;&#xA;&lt;li&gt;沿途在两个加油站停靠，所以返回 2 。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;提示&#34;&gt;提示&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 &amp;lt;= target, startFuel &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;9&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;0 &amp;lt;= stations.length &amp;lt;= 500&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= position&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; &amp;lt; position&lt;!-- raw HTML omitted --&gt;i+1&lt;!-- raw HTML omitted --&gt; &amp;lt; target&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= fuel&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; &amp;lt; 10&lt;!-- raw HTML omitted --&gt;9&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;难度&#34;&gt;难度&lt;/h1&gt;&#xA;&lt;p&gt;困难&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 134 加油站</title>
      <link>https://y-m-m.github.io/post/leetcode134%E5%8A%A0%E6%B2%B9%E7%AB%99/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode134%E5%8A%A0%E6%B2%B9%E7%AB%99/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/gas-station/description/&#34;&gt;leetcode 134&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;题目&#34;&gt;题目&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;给定两个整数数组 gas 和 cost ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;&#xA;&lt;h2 id=&#34;示例一&#34;&gt;示例一&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]&lt;/li&gt;&#xA;&lt;li&gt;输出: 3&lt;/li&gt;&#xA;&lt;li&gt;解释:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。&lt;/li&gt;&#xA;&lt;li&gt;因此，3 可为起始索引。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例二&#34;&gt;示例二&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入: gas = [2,3,4], cost = [3,4,3]&lt;/li&gt;&#xA;&lt;li&gt;输出: -1&lt;/li&gt;&#xA;&lt;li&gt;解释:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。&lt;/li&gt;&#xA;&lt;li&gt;我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油&lt;/li&gt;&#xA;&lt;li&gt;开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油&lt;/li&gt;&#xA;&lt;li&gt;你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。&lt;/li&gt;&#xA;&lt;li&gt;因此，无论怎样，你都不可能绕环路行驶一周。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;提示&#34;&gt;提示&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;gas.length == n&lt;/li&gt;&#xA;&lt;li&gt;cost.length == n&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= n &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;5&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;0 &amp;lt;= gas[i], cost[i] &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;难度&#34;&gt;难度&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;题解&#34;&gt;题解&lt;/h1&gt;&#xA;&lt;h2 id=&#34;方法一&#34;&gt;方法一&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;canCompleteCircuit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_gas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;min_gas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rest_gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;容易发现规律：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果走过所有加油站后，油的余量大于0，即gas的所有项之和大于cost的所有项之和，则有解(?如何证明)&lt;/li&gt;&#xA;&lt;li&gt;建立rest_gas的数组，存储从0加油站出发，经过每个加油站之后油的余量。解即为从油余量最小的加油站的下一站出发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;方法二力扣官方题解&#34;&gt;方法二(力扣官方题解)&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;canCompleteCircuit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumOfGas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumOfCost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;sumOfGas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;sumOfCost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sumOfCost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumOfGas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/gas-station/solutions/1/jia-you-zhan-by-leetcode-solution/&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/gas-station/solutions/1/jia-you-zhan-by-leetcode-solution/&#34;&gt;leetcode 134 官方题解&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 1227 飞机座位分配概率</title>
      <link>https://y-m-m.github.io/post/leetcode1227%E9%A3%9E%E6%9C%BA%E5%BA%A7%E4%BD%8D%E5%88%86%E9%85%8D%E6%A6%82%E7%8E%87/</link>
      <pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode1227%E9%A3%9E%E6%9C%BA%E5%BA%A7%E4%BD%8D%E5%88%86%E9%85%8D%E6%A6%82%E7%8E%87/</guid>
      <description>&lt;p&gt;这是一道超有意思的题&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;剩下的乘客将会：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果他们自己的座位还空着，就坐到自己的座位上，&lt;/li&gt;&#xA;&lt;li&gt;当他们自己的座位被占用时，随机选择其他座位&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第 n 位乘客坐在自己的座位上的概率是多少？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;示例一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：n = 1&lt;/li&gt;&#xA;&lt;li&gt;输出：1.00000&lt;/li&gt;&#xA;&lt;li&gt;解释：第一个人只会坐在自己的位置上。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;示例二&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入: n = 2&lt;/li&gt;&#xA;&lt;li&gt;输出: 0.50000&lt;/li&gt;&#xA;&lt;li&gt;解释：在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;提示&#34;&gt;提示&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 &amp;lt;= n &amp;lt;= 10&lt;!-- raw HTML omitted --&gt;5&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;题解&#34;&gt;题解&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nthPersonGetsNthSeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/airplane-seat-assignment-probability/solutions/43180/ju-ti-fen-xi-lai-yi-bo-by-jobhunter-4/&#34;&gt;leetcode题解&lt;/a&gt;&#xA;&lt;a href=&#34;https://leetcode.cn/problems/airplane-seat-assignment-probability/solutions/664495/fei-ji-zuo-wei-fen-pei-gai-lu-by-leetcod-gyw4/&#34;&gt;leetcode官方题解&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 1870 准时到达的列车的最小时速</title>
      <link>https://y-m-m.github.io/post/leetcode1870%E5%87%86%E6%97%B6%E5%88%B0%E8%BE%BE%E7%9A%84%E5%88%97%E8%BD%A6%E7%9A%84%E6%9C%80%E5%B0%8F%E6%97%B6%E9%80%9F/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode1870%E5%87%86%E6%97%B6%E5%88%B0%E8%BE%BE%E7%9A%84%E5%88%97%E8%BD%A6%E7%9A%84%E6%9C%80%E5%B0%8F%E6%97%B6%E9%80%9F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-speed-to-arrive-on-time/description/&#34;&gt;leetcode 1870&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;给你一个浮点数 hour ，表示你到达办公室可用的总通勤时间。要到达办公室，你必须按给定次序乘坐 n 趟列车。另给你一个长度为 n 的整数数组 dist ，其中 dist[i] 表示第 i 趟列车的行驶距离（单位是千米）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;每趟列车均只能在整点发车，所以你可能需要在两趟列车之间等待一段时间。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;例如，第 1 趟列车需要 1.5 小时，那你必须再等待 0.5 小时，搭乘在第 2 小时发车的第 2 趟列车。       &lt;br&gt;&#xA;返回能满足你准时到达办公室所要求全部列车的 最小正整数 时速（单位：千米每小时），如果无法准时到达，则返回 -1 。&lt;/p&gt;&#xA;&lt;p&gt;生成的测试用例保证答案不超过 107 ，且 hour 的 小数点后最多存在两位数字 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：dist = [1,3,2], hour = 6&lt;/li&gt;&#xA;&lt;li&gt;输出：1&lt;/li&gt;&#xA;&lt;li&gt;解释：速度为 1 时：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;第 1 趟列车运行需要 1/1 = 1 小时。&lt;/li&gt;&#xA;&lt;li&gt;由于是在整数时间到达，可以立即换乘在第 1 小时发车的列车。第 2 趟列车运行需要 3/1 = 3 小时。&lt;/li&gt;&#xA;&lt;li&gt;由于是在整数时间到达，可以立即换乘在第 4 小时发车的列车。第 3 趟列车运行需要 2/1 = 2 小时。&lt;/li&gt;&#xA;&lt;li&gt;你将会恰好在第 6 小时到达。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;提示&#34;&gt;提示&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;n == dist.length&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= n &amp;lt;= 105&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= dist[i] &amp;lt;= 105&lt;/li&gt;&#xA;&lt;li&gt;1 &amp;lt;= hour &amp;lt;= 109&lt;/li&gt;&#xA;&lt;li&gt;hours 中，小数点后最多存在两位数字&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;题解&#34;&gt;题解&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一&#34;&gt;方法一&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;minSpeedOnTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pre_speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pre_speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now_dist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now_dist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;now_dist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;all_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;all_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;50/66个通过的测试样例&lt;/li&gt;&#xA;&lt;li&gt;超出时间限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;思路&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于n辆车，最终所需时间一定大于n-1，先判断hour能不能满足这个条件，如果不能，就直接返回-1&lt;/li&gt;&#xA;&lt;li&gt;先用总路程除以总时间，向上取整，确定最终需要的最小速度的底线，再由底线依次递增，逐个判断当前速度能不能满足条件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;double所能存储的位数有限，一旦浮点数过小，就会被当成0处理(已修正)&lt;/li&gt;&#xA;&lt;li&gt;注意long long和double数据类型之间的转换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;方法二&#34;&gt;方法二&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;minSpeedOnTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 将hour乘100，再通过llround函数四舍五入为整型&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;llround&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// hour &amp;gt; n-1 才能满足条件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 二分查找合适的速度&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// 计算速度为mid的时候所需要的总时间&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// 前n - 1段中第i段贡献的时间&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// 最后一段贡献的时间&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 将分数比较转化为整数比较&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>leetcode 983 最低票价</title>
      <link>https://y-m-m.github.io/post/leetcode983%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode983%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;火车票有 三种不同的销售方式 ：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一张 为期一天 的通行证售价为 costs[0] 美元；&lt;/li&gt;&#xA;&lt;li&gt;一张 为期七天 的通行证售价为 costs[1] 美元；&lt;/li&gt;&#xA;&lt;li&gt;一张 为期三十天 的通行证售价为 costs[2] 美元。&lt;/li&gt;&#xA;&lt;li&gt;通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张 为期 7 天 的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;返回 你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费 。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：days = [1,4,6,7,8,20], costs = [2,7,15]&lt;/li&gt;&#xA;&lt;li&gt;输出：11&lt;/li&gt;&#xA;&lt;li&gt;解释：&#xA;例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划： &lt;br&gt;&#xA;在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。     &lt;br&gt;&#xA;在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, &amp;hellip;, 9 天生效。   &lt;br&gt;&#xA;在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。  &lt;br&gt;&#xA;你总共花了 $11，并完成了你计划的每一天旅行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;提示&#34;&gt;提示&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数组&lt;/li&gt;&#xA;&lt;li&gt;动态规划&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;难度&#34;&gt;难度&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;题解&#34;&gt;题解&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一&#34;&gt;方法一&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mincostTickets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_travel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;is_travel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;is_travel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_travel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;costs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;思路&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最优子结构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第i天所需花费的金额，仅与这一天是否外出旅行，以及i-1天/i-7天/i-30天所需花费的金额有关&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;建立is_travel数组，便于查询每一天是否需要出行&lt;/li&gt;&#xA;&lt;li&gt;建立all_money数组，存储截止第i天为止需要花费的金额，根据is_travel[i], all_moneny[i - 1], all_money[i - 7], all_money[i - 30], costs[0], cost[1], cost[2]求得&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;注意&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要考虑costs[2] &amp;lt; costs[1] &amp;lt; costs[0]的情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;改进(已修改代码)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将is_travel改成bool类型的&lt;/li&gt;&#xA;&lt;li&gt;不要一次开长度为365的数组，根据去旅行的最后一天来开，够用就行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; STL中heap函数的用法</title>
      <link>https://y-m-m.github.io/post/c&#43;&#43;stl%E4%B8%ADheap%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/c&#43;&#43;stl%E4%B8%ADheap%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;c-stl中heap函数的用法&#34;&gt;C++ STL中heap函数的用法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是heap&#34;&gt;什么是heap？&lt;/h2&gt;&#xA;&lt;p&gt;C++STL中提供的一种构建和维护&lt;a href=&#34;https://en.wikipedia.org/wiki/Heap_(data_structure)&#34;&gt;堆&lt;/a&gt;的函数接口&lt;/p&gt;&#xA;&lt;h2 id=&#34;包括哪些函数&#34;&gt;包括哪些函数？&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;make_heap(_First, _Last, _Comp)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将区间内的元素构建成堆&lt;/li&gt;&#xA;&lt;li&gt;_First: 需要构建堆的第一个元素的迭代器；_Last: 需要构建堆的最后一个元素的迭代器&lt;/li&gt;&#xA;&lt;li&gt;_Comp 构建方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;less&lt;!-- raw HTML omitted --&gt;() 大顶堆，默认是大顶堆&lt;/li&gt;&#xA;&lt;li&gt;greater&lt;!-- raw HTML omitted --&gt;() 小顶堆&lt;/li&gt;&#xA;&lt;li&gt;需要#include &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;push_heap(_First, _Last, _Comp)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新添加一个元素在末尾(vector的end处)，然后重新调整堆序&lt;/li&gt;&#xA;&lt;li&gt;第三个参数应该与make_heap保持一致&lt;/li&gt;&#xA;&lt;li&gt;在使用push_heap之前，应确保已经用push_back()将数据存入到数组中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;pop_heap(_First, _Last, _Comp)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对heap取出下一个元素，把堆顶元素取出来，放至区间末尾，其余元素进行调整，重新构成堆&lt;/li&gt;&#xA;&lt;li&gt;第三个参数应与make_heap保持一致&lt;/li&gt;&#xA;&lt;li&gt;如果要弹出原先的堆顶元素，应再使用pop_back()&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;sort_heap(_First, _Last)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将heap转化为一个已排序群集&lt;/li&gt;&#xA;&lt;li&gt;将堆进行排序，排序后序列将失去堆的特性，小顶堆所得的群集数字从小到大排列，大顶堆所得的群集从大到小排列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;is_heap()&#xA;&lt;ul&gt;&#xA;&lt;li&gt;测试范围内的元素是否为一个二叉堆&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;is_heap_until()&#xA;&lt;ul&gt;&#xA;&lt;li&gt;返回第一个破坏二插堆结构的元素的迭代器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;内部是如何实现的&#34;&gt;内部是如何实现的？&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/w3cnote/heap-sort.html&#34;&gt;堆排序&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;举例&#34;&gt;举例&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/seat-reservation-manager/description/&#34;&gt;leetcode1845(参考官方题解)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SeatManager&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SeatManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 为数组增加新的元素&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;make_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 构建小顶堆&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reserve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pop_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 将小顶堆的堆顶元素弹出来，放到数组最后，调整其他元素构成新的堆&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unreserve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seatNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seatNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;push_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Your SeatManager object will be instantiated and called as such:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * SeatManager* obj = new SeatManager(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * int param_1 = obj-&amp;gt;reserve();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * obj-&amp;gt;unreserve(seatNumber);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/bandaoyu/article/details/109441444&#34;&gt;csdn1&lt;/a&gt; &lt;br&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/longhopefor/article/details/38303545&#34;&gt;csdn2&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>数状数组与线段树</title>
      <link>https://y-m-m.github.io/post/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid>
      <description>&lt;h1 id=&#34;数状数组与线段树&#34;&gt;数状数组与线段树&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数状数组&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种支持单点修改和区间查询的代码量小的数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;线段树&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用来维护&lt;strong&gt;区间信息&lt;/strong&gt;的数据结构&lt;/li&gt;&#xA;&lt;li&gt;可以在O(logN)的时间复杂度内实现单点修改，区间修改，区间查询等操作&#xA;普通数状数组维护的信息及运算要满足&lt;strong&gt;结合律&lt;/strong&gt;和&lt;strong&gt;可差分&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;什么是可差分？&#xA;    具有逆运算的运算，即已知x * y和x可以求出y&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;树状数组和线段树有什么区别？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;树状数组能解决的问题是线段树的子集，树状数组能做的，线段树一定可以，线段树能做的，树状数组不一定可以&lt;/li&gt;&#xA;&lt;li&gt;树状数组代码要远比线段树短，时间效率常数更小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;为什么要使用树状数组和线段树&#34;&gt;为什么要使用树状数组和线段树？&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.04.37.png&#34; alt=&#34;原数组&#34;&gt;  &lt;br&gt;&#xA;观察如图所示的数组，数组a长度为n    &lt;br&gt;&#xA;每次求前m项和的时间复杂度为O(n)，如果要反复求前m项和，需要花费太多时间。有没有什么办法能降低其时间复杂度呢？&lt;/p&gt;&#xA;&lt;p&gt;考虑&lt;strong&gt;前缀和数组&lt;/strong&gt;，数组中每个位置记录从a&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;开始到这个位置的所有数字之和，每次想要求前m项和时只需将索引为m-1的数字取出来即可&lt;/p&gt;&#xA;&lt;p&gt;看起来很好，存在什么问题呢？     &lt;br&gt;&#xA;&lt;strong&gt;单点修改&lt;/strong&gt;太麻烦。每次只要a&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;发生改变，前缀和数组中后续所有数字都需要改变。&lt;/p&gt;&#xA;&lt;p&gt;还有什么更好的办法吗？   &lt;br&gt;&#xA;可维护一个新的数据结构，如下&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.09.17.png&#34; alt=&#34;&#34;&gt; &lt;br&gt;&#xA;在这个数据结构中，若要计算所有数字之和，只需取最上面一层61即可，计算前三个数字之和只需要第二层(从下面数)的14与第一层的1即可，依次类推&lt;/p&gt;&#xA;&lt;p&gt;很容易就可以发现，每一行从下标0开始，1、3、5等奇数序号的数字在求前m项和时完全不会用到，无需额外存储&lt;/p&gt;&#xA;&lt;p&gt;去掉奇数项之后  &lt;br&gt;&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.18.19.png&#34; alt=&#34;剩下需要额外存储的数&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;为这些数字构建一个新的数组c &lt;br&gt;&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.19.16.png&#34; alt=&#34;所获新数组&#34;&gt;&lt;br&gt;&#xA;数组c就是树状数组，在树状数组中，可以很容易的完成单点修改、单点查询、区间修改、区间查询等操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;神奇的是，新数组的长度刚好为n&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;为什么呢？        &lt;br&gt;&#xA;$(1 + 2 + 4 + 8 + &amp;hellip; + n/2) + 1 = n - 1 + 1 = n$&lt;/p&gt;&#xA;&lt;h2 id=&#34;观察树状数组&#34;&gt;观察树状数组&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.51.07.png&#34; alt=&#34;树状数组样例&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 2286 以组为单位订音乐会门票</title>
      <link>https://y-m-m.github.io/post/leetcode2286%E4%BB%A5%E7%BB%84%E4%B8%BA%E5%8D%95%E4%BD%8D%E8%AE%A2%E9%9F%B3%E4%B9%90%E4%BC%9A%E9%97%A8%E7%A5%A8/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode2286%E4%BB%A5%E7%BB%84%E4%B8%BA%E5%8D%95%E4%BD%8D%E8%AE%A2%E9%9F%B3%E4%B9%90%E4%BC%9A%E9%97%A8%E7%A5%A8/</guid>
      <description>&lt;h1 id=&#34;2286-以组为单位订音乐会门票&#34;&gt;2286 以组为单位订音乐会门票&lt;/h1&gt;&#xA;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一个音乐会总共有 n 排座位，编号从 0 到 n - 1 ，每一排有 m 个座椅，编号为 0 到 m - 1 。你需要设计一个买票系统，针对以下情况进行座位安排：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;同一组的 k 位观众坐在 同一排座位，且座位连续 。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;k 位观众中 每一位 都有座位坐，但他们 不一定 坐在一起。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;由于观众非常挑剔，所以：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有当一个组里所有成员座位的排数都 小于等于 maxRow ，这个组才能订座位。每一组的 maxRow 可能 不同 。&lt;/li&gt;&#xA;&lt;li&gt;如果有多排座位可以选择，优先选择 最小 的排数。如果同一排中有多个座位可以坐，优先选择号码 最小 的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;请你实现 BookMyShow 类：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;BookMyShow(int n, int m) ，初始化对象，n 是排数，m 是每一排的座位数。&lt;/li&gt;&#xA;&lt;li&gt;int[] gather(int k, int maxRow) 返回长度为 2 的数组，表示 k 个成员中 第一个座位 的排数和座位编号，这 k 位成员必须坐在 同一排座位，且座位连续 。换言之，返回最小可能的 r 和 c 满足第 r 排中 [c, c + k - 1] 的座位都是空的，且 r &amp;lt;= maxRow 。如果 无法 安排座位，返回 [] 。&lt;/li&gt;&#xA;&lt;li&gt;boolean scatter(int k, int maxRow) 如果组里所有 k 个成员 不一定 要坐在一起的前提下，都能在第 0 排到第 maxRow 排之间找到座位，那么请返回 true 。这种情况下，每个成员都优先找排数 最小 ，然后是座位编号最小的座位。如果不能安排所有 k 个成员的座位，请返回 false 。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;难度：困难&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 2516 每种字符至少取k个</title>
      <link>https://y-m-m.github.io/post/leetcode2516%E6%AF%8F%E7%A7%8D%E5%AD%97%E7%AC%A6%E8%87%B3%E5%B0%91%E5%8F%96k%E4%B8%AA/</link>
      <pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode2516%E6%AF%8F%E7%A7%8D%E5%AD%97%E7%AC%A6%E8%87%B3%E5%B0%91%E5%8F%96k%E4%B8%AA/</guid>
      <description>&lt;h1 id=&#34;2516-每种字符至少取k个&#34;&gt;2516 每种字符至少取k个&lt;/h1&gt;&#xA;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;给你一个由字符 &amp;lsquo;a&amp;rsquo;、&amp;lsquo;b&amp;rsquo;、&amp;lsquo;c&amp;rsquo; 组成的字符串 s 和一个非负整数 k 。每分钟，你可以选择取走 s 最左侧 还是 最右侧 的那个字符。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你必须取走每种字符 至少 k 个，返回需要的 最少 分钟数；如果无法取到，则返回 -1 。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入：s = &amp;ldquo;aabaaaacaabc&amp;rdquo;, k = 2&lt;/li&gt;&#xA;&lt;li&gt;输出：8&lt;/li&gt;&#xA;&lt;li&gt;解释：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从 s 的左侧取三个字符，现在共取到两个字符 &amp;lsquo;a&amp;rsquo; 、一个字符 &amp;lsquo;b&amp;rsquo; 。&lt;/li&gt;&#xA;&lt;li&gt;从 s 的右侧取五个字符，现在共取到四个字符 &amp;lsquo;a&amp;rsquo; 、两个字符 &amp;lsquo;b&amp;rsquo; 和两个字符 &amp;lsquo;c&amp;rsquo; 。&lt;/li&gt;&#xA;&lt;li&gt;共需要 3 + 5 = 8 分钟。&lt;/li&gt;&#xA;&lt;li&gt;可以证明需要的最少分钟数是 8 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;题解&#34;&gt;题解&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方案一&#34;&gt;方案一&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Solution {&#xA;public:&#xA;    int takeCharacters(string s, int k) {&#xA;        if (!k) return 0;&#xA;        int character[s.length() + 2][3];&#xA;        int reverse[s.length() + 2][3];&#xA;        int a_num = 0, b_num = 0, c_num = 0;&#xA;        character[0][0] = 0, character[0][1] = 0, character[0][2] = 0;&#xA;        for (int i = 0; i &amp;lt; s.length(); i++) {&#xA;            if (s[i] == &amp;#39;a&amp;#39;) a_num++;&#xA;            else if (s[i] == &amp;#39;b&amp;#39;) b_num++;&#xA;            else if (s[i] == &amp;#39;c&amp;#39;) c_num++;&#xA;            character[i + 1][0] = a_num;&#xA;            character[i + 1][1] = b_num;&#xA;            character[i + 1][2] = c_num;&#xA;        }&#xA;        if (character[s.length()][0] &amp;lt; k || character[s.length()][1] &amp;lt; k || character[s.length()][2] &amp;lt; k) {&#xA;            cout &amp;lt;&amp;lt; &amp;#34;character[s.length()][0], character[s.length()][1], character[s.length()][2] = &amp;#34; &amp;lt;&amp;lt; character[s.length()][0] &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; character[s.length()][1] &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; character[s.length()][1] &amp;lt;&amp;lt; endl;&#xA;            return -1;&#xA;        }&#xA;        int min_len = s.length();&#xA;        for (int i = 0; i &amp;lt;= s.length(); i++) {&#xA;            for (int j = s.length(); j &amp;gt; i; j--) {&#xA;                if (character[i][0] + character[s.length()][0] - character[j][0] &amp;gt;= k &amp;amp;&amp;amp; character[i][1] + character[s.length()][1] - character[j][1] &amp;gt;= k &amp;amp;&amp;amp; character[i][2] + character[s.length()][2] - character[j][2] &amp;gt;= k) {&#xA;                    cout &amp;lt;&amp;lt; &amp;#34;i = &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34;, j = &amp;#34; &amp;lt;&amp;lt; j &amp;lt;&amp;lt; endl;&#xA;                    min_len = (i+s.length()-j) &amp;lt; min_len ? (i+s.length()-j) : min_len;&#xA;                    cout &amp;lt;&amp;lt; &amp;#34;min_len = &amp;#34; &amp;lt;&amp;lt; min_len &amp;lt;&amp;lt; endl;&#xA;                    break;&#xA;                }&#xA;            }&#xA;            continue;&#xA;        }&#xA;        return min_len;&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;提交结果&#xA;&lt;ul&gt;&#xA;&lt;li&gt;118/141个通过的测试样例&lt;/li&gt;&#xA;&lt;li&gt;超出时间限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;思路&#xA;&lt;ul&gt;&#xA;&lt;li&gt;建立s.length()*3数组，从前往后遍历，将三种字符的数目存入数组中&lt;/li&gt;&#xA;&lt;li&gt;对数组暴力求解满足条件的需要取走的最少字符数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两重循环，时间复杂度O(n&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;方案二leetcode-官方题解&#34;&gt;方案二(leetcode 官方题解)&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right/solutions/2928177/mei-chong-zi-fu-zhi-shao-qu-k-ge-by-leet-10ct/&#34;&gt;leetcode 2516 每种字符至少取k个&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>leetcode 2306 公司命名</title>
      <link>https://y-m-m.github.io/post/leetcode2306%E5%85%AC%E5%8F%B8%E5%91%BD%E5%90%8D/</link>
      <pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcode2306%E5%85%AC%E5%8F%B8%E5%91%BD%E5%90%8D/</guid>
      <description>&lt;h1 id=&#34;2306-公司命名&#34;&gt;2306 公司命名&lt;/h1&gt;&#xA;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给你一个字符串数组 ideas 表示在公司命名过程中使用的名字列表。公司命名流程如下：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从 ideas 中选择 2 个 不同 名字，称为 ideaA 和 ideaB 。&lt;/li&gt;&#xA;&lt;li&gt;交换 ideaA 和 ideaB 的首字母。&lt;/li&gt;&#xA;&lt;li&gt;如果得到的两个新名字 都 不在 ideas 中，那么 ideaA ideaB（串联 ideaA 和 ideaB ，中间用一个空格分隔）是一个有效的公司名字。&lt;/li&gt;&#xA;&lt;li&gt;否则，不是一个有效的名字。&lt;/li&gt;&#xA;&lt;li&gt;返回 不同 且有效的公司名字的数目&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;&#xA;&lt;p&gt;输入：ideas = [&amp;ldquo;coffee&amp;rdquo;,&amp;ldquo;donuts&amp;rdquo;,&amp;ldquo;time&amp;rdquo;,&amp;ldquo;toffee&amp;rdquo;]&#xA;输出：6&#xA;解释：下面列出一些有效的选择方案：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;(&amp;ldquo;coffee&amp;rdquo;, &amp;ldquo;donuts&amp;rdquo;)：对应的公司名字是 &amp;ldquo;doffee conuts&amp;rdquo; 。&lt;/li&gt;&#xA;&lt;li&gt;(&amp;ldquo;donuts&amp;rdquo;, &amp;ldquo;coffee&amp;rdquo;)：对应的公司名字是 &amp;ldquo;conuts doffee&amp;rdquo; 。&lt;/li&gt;&#xA;&lt;li&gt;(&amp;ldquo;donuts&amp;rdquo;, &amp;ldquo;time&amp;rdquo;)：对应的公司名字是 &amp;ldquo;tonuts dime&amp;rdquo; 。&lt;/li&gt;&#xA;&lt;li&gt;(&amp;ldquo;donuts&amp;rdquo;, &amp;ldquo;toffee&amp;rdquo;)：对应的公司名字是 &amp;ldquo;tonuts doffee&amp;rdquo; 。&lt;/li&gt;&#xA;&lt;li&gt;(&amp;ldquo;time&amp;rdquo;, &amp;ldquo;donuts&amp;rdquo;)：对应的公司名字是 &amp;ldquo;dime tonuts&amp;rdquo; 。&lt;/li&gt;&#xA;&lt;li&gt;(&amp;ldquo;toffee&amp;rdquo;, &amp;ldquo;donuts&amp;rdquo;)：对应的公司名字是 &amp;ldquo;doffee tonuts&amp;rdquo; 。&#xA;因此，总共有 6 个不同的公司名字。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下面列出一些无效的选择方案：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统bilibili版</title>
      <link>https://y-m-m.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fbilibili%E7%89%88/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fbilibili%E7%89%88/</guid>
      <description>&lt;h1 id=&#34;第一章-操作系统的介绍&#34;&gt;第一章 操作系统的介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11_1-操作系统的概念功能&#34;&gt;1.1_1 操作系统的概念、功能&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本的系统软件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统是系统资源的管理者&#xA;&lt;ul&gt;&#xA;&lt;li&gt;补充：执行一个程序前需要将该程序放到内存中，才能被CPU处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;向上提供方便易用的服务&#xA;&lt;ul&gt;&#xA;&lt;li&gt;封装思想：操作系统把一些丑陋的硬件共嗯那个封装成简单易用的服务，使用户能更方便的使用计算机，用户无需关心底层硬件的原理，只需要对操作系统发出指令即可&lt;/li&gt;&#xA;&lt;li&gt;GUI 图形化用户接口&lt;/li&gt;&#xA;&lt;li&gt;联机命令接口=交互式命令接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户说一句，系统跟着做一句&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脱机命令接口(批处理命令接口)&lt;/li&gt;&#xA;&lt;li&gt;程序接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以在程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用&lt;/li&gt;&#xA;&lt;li&gt;例如，在写C语言&amp;quot;Hello World&amp;quot;程序时，在printf函数的底层就使用到了操作系统提供的显式相关的“系统调用”&lt;/li&gt;&#xA;&lt;li&gt;系统调用类似于函数调用，是应用程序请求系统操作服务的唯一方式&lt;/li&gt;&#xA;&lt;li&gt;在有的教材中，系统调用=广义指令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;是最接近硬件的一层软件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要实现对硬件机器的扩展&lt;/li&gt;&#xA;&lt;li&gt;裸机：没有任何软件支持的计算机称为裸机&lt;/li&gt;&#xA;&lt;li&gt;虚拟机：覆盖了软件的机器称为扩充机器，又称之为虚拟机&lt;/li&gt;&#xA;&lt;li&gt;操作系统将CPU, 内存，磁盘，显示器，键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-11%2019.53.51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;11_2-操作系统的特征&#34;&gt;1.1_2 操作系统的特征&lt;/h2&gt;&#xA;&lt;h3 id=&#34;并发&#34;&gt;并发&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并发：两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。/并行：两个或多个事件在同一时刻同时发生&lt;/li&gt;&#xA;&lt;li&gt;操作系统的并发性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。操作系统就是伴随着“多道程序技术”而出现的，因此，操作系统和程序并发是一起诞生的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;注意&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单核CPU同一时刻只能执行一个程序，多个程序只能并发执行&lt;/li&gt;&#xA;&lt;li&gt;多核CPU同一时刻可以同时执行多个程序，多个程序可以并行地执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;是操作系统一个重要的基础特性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;共享&#34;&gt;共享&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;资源共享，系统中的资源可供内存中多个并发执行的进程共同使用&lt;/li&gt;&#xA;&lt;li&gt;两种共享方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互斥共享方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个时间段内只允许一个进程访问该资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同时共享方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;允许一个时间段内多个进程“同时”对它们进行访问&lt;/li&gt;&#xA;&lt;li&gt;同时往往是宏观上的，微观上，这些进程可能是交替地对该资源进行访问的(分时共享)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;并发和共享的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义&lt;/li&gt;&#xA;&lt;li&gt;如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;虚拟&#34;&gt;虚拟&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体(前者)是实际存在的，而逻辑上的对应物(后者)是用户感应到的&lt;/li&gt;&#xA;&lt;li&gt;虚拟技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空分复用技术(如虚拟存储技术)&lt;/li&gt;&#xA;&lt;li&gt;时分复用技术(如虚拟处理器)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;并发性与虚拟性的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果失去了并发性，则一个时间段内系统中之运行一道程序，那么就失去了实现虚拟性的意义了&lt;/li&gt;&#xA;&lt;li&gt;没有并发性，就谈不上虚拟性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;异步&#34;&gt;异步&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性&lt;/li&gt;&#xA;&lt;li&gt;由于并发运行的程序会争抢着使用系统资源，而系统中的资源有限，因此进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进&lt;/li&gt;&#xA;&lt;li&gt;并发性与异步性的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果失去了并发性，即系统只能串行地运行各个程序，那么每个程序的执行会一贯到底，只有程序拥有并发性，才有可能导致异步性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结-1&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-11%2022.16.20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;12-操作系统的发展和分类&#34;&gt;1.2 操作系统的发展和分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;手工操作阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要缺点：用户独占全机、人际速度矛盾导致资源利用率低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;批处理阶段——单道批处理系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;引入脱机输入/输出技术，并由监督程序负责控制作业的输入、输出&lt;/li&gt;&#xA;&lt;li&gt;监督程序是操作系统的雏形&lt;/li&gt;&#xA;&lt;li&gt;主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;批处理阶段——多道批处理系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每次往内存中读入多道程序&lt;/li&gt;&#xA;&lt;li&gt;操作系统正式诞生，用于支持多道程序并发运行&lt;/li&gt;&#xA;&lt;li&gt;主要优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌“状态，系统吞吐量大&lt;/li&gt;&#xA;&lt;li&gt;主要缺点：用户响应时间长，没有人机交互功能(用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行。无法调试程序/无法在程序运行过程中输入一些参数)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分时操作系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互&lt;/li&gt;&#xA;&lt;li&gt;主要优点：用户请求可以被即时相应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在&lt;/li&gt;&#xA;&lt;li&gt;主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实时操作系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队&lt;/li&gt;&#xA;&lt;li&gt;在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性&lt;/li&gt;&#xA;&lt;li&gt;分类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬实时系统：必须在绝对严格的规定时间内完成处理&lt;/li&gt;&#xA;&lt;li&gt;软实时系统：能接受偶尔违反时间规定&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;其他几种操作系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络操作系统 实现数据传送等功能，实现网络中各种资源的共(如文件共享)和各台计算机之间的通信&lt;/li&gt;&#xA;&lt;li&gt;分布式操作系统：分布性和并行性。系统中各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务&lt;/li&gt;&#xA;&lt;li&gt;个人计算机操作系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结-2&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-11%2022.29.42.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>程序设计实践</title>
      <link>https://y-m-m.github.io/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;张海滨&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;mailto:zhanghb@bupt.edu.cn&#34;&gt;zhanghb@bupt.edu.cn&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;教材&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序设计实践 The Practice of Programming 人民邮电出版社&lt;/li&gt;&#xA;&lt;li&gt;程序设计实践 机械工业出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;20学时 10周讲解相关知识；12学时大作业，验收&lt;/li&gt;&#xA;&lt;li&gt;课程内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;风格&lt;/li&gt;&#xA;&lt;li&gt;设计与实现&lt;/li&gt;&#xA;&lt;li&gt;接口&lt;/li&gt;&#xA;&lt;li&gt;排错&lt;/li&gt;&#xA;&lt;li&gt;测试&lt;/li&gt;&#xA;&lt;li&gt;性能&lt;/li&gt;&#xA;&lt;li&gt;可移植性&lt;/li&gt;&#xA;&lt;li&gt;记法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;考核方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;平时成绩 小作业 30%&lt;/li&gt;&#xA;&lt;li&gt;大作业 70%&lt;/li&gt;&#xA;&lt;li&gt;均提交至教学云平台，大作业需验收&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;大作业&#xA;&lt;ul&gt;&#xA;&lt;li&gt;题目：基于领域特定语言的客服机器人的设计与实现&lt;/li&gt;&#xA;&lt;li&gt;描述：领域特定语言(DSL)可以提供一种相对简单的文法，用于特定领域的业务流程定制。本作业要求定义一个领域特定脚本语言，这个语言能够描述在线客服机器人(机器人客服是目前提升客服效率的重要技术，在银行、通信和商务等领域的复杂信息系统中有广泛的应用)的自动应答逻辑，并设计实现一个解释器解释执行这个脚本，可以根据用户的不同输入，根据脚本的逻辑设计给出相应的应答&lt;/li&gt;&#xA;&lt;li&gt;基本要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;脚本语言的语法可以自由定义，只要与以上满足客服机器人自动应答逻辑的要求&lt;/li&gt;&#xA;&lt;li&gt;程序输入输出形式不限，可以简化为纯命令行界面&lt;/li&gt;&#xA;&lt;li&gt;应该输出几种不同的脚本范例，对不同范例解释执行之后会有不同的行为表现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;评分标准&#xA;&lt;ul&gt;&#xA;&lt;li&gt;风格15分，代码注释6分，命名6分，其它3分&lt;/li&gt;&#xA;&lt;li&gt;设计和实现30分，其中数据结构7分，模块划分7分，功能8分，文档8分&lt;/li&gt;&#xA;&lt;li&gt;接口15分，程序间接口8分，人机接口7分&lt;/li&gt;&#xA;&lt;li&gt;测试30分，测试桩15分，自动测试脚本15分&lt;/li&gt;&#xA;&lt;li&gt;记法10分，文档中对此脚本语言的语法的准确描述&lt;/li&gt;&#xA;&lt;li&gt;抄袭或有意被抄袭0分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;养成使用版本管理工具的习惯&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第一章-风格style&#34;&gt;第一章 风格style&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码风格因人而异&lt;/li&gt;&#xA;&lt;li&gt;有争议的风格&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遵从你所在组织的规范&lt;/li&gt;&#xA;&lt;li&gt;与同一个文件中其他代码风格保持一致&lt;/li&gt;&#xA;&lt;li&gt;与同一项目里其他文件的风格尽量保持一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;无争议的风格：命名风格，表达式和语句的风格，一致性和习惯用法，函数宏定义，避免神秘的数，注释风格等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;程序的风格&#34;&gt;程序的风格&lt;/h2&gt;&#xA;&lt;h3 id=&#34;命名的风格&#34;&gt;命名的风格&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;名字要准确的表达用途&lt;/li&gt;&#xA;&lt;li&gt;名字不是越长越好&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局变量可以用具有描述意义的长名字&lt;/li&gt;&#xA;&lt;li&gt;局部变量用短名字会显得程序更简洁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;类的成员的名字，不要再啰嗦重复类名&lt;/li&gt;&#xA;&lt;li&gt;用动词或者动词+名次定义函数名&lt;/li&gt;&#xA;&lt;li&gt;返回布尔值的函数名应该是一个命题，通常使用is作为函数名中的动词&lt;/li&gt;&#xA;&lt;li&gt;名字尽可能简单明了，不要用“否定之否定”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;表达式和语句&#34;&gt;表达式和语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用表达式的自然形式，即常见的易于理解的形式&lt;/li&gt;&#xA;&lt;li&gt;利用括号排除歧义，即使语法上不要求括号，也建议加上括号以便提高代码可读性&lt;/li&gt;&#xA;&lt;li&gt;分解复杂的表达式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;一致性和习惯用法&#34;&gt;一致性和习惯用法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用一致的缩进和花括号风格(例如两行以上一定加花括号)&lt;/li&gt;&#xA;&lt;li&gt;使用大多数人最习惯的用法(for循环)&lt;/li&gt;&#xA;&lt;li&gt;用else if处理多路选择，一个判断尽可能接近它所对应的动作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;函数宏&#34;&gt;函数宏&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免宏定义参数中写很多东西。函数宏的缺点，直接替换，导致用到两次的参数被替换两次，执行两次，可能直接导致错误&lt;/li&gt;&#xA;&lt;li&gt;函数宏的缺点，直接替换，导致用到两次的参数会被替换两次，执行两次，也可能导致性能错误&lt;/li&gt;&#xA;&lt;li&gt;如果一定要用函数宏，不要吝啬括号&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ 尽可能使用inline函数&lt;/li&gt;&#xA;&lt;li&gt;Java根本不支持函数宏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;神秘的数&#34;&gt;神秘的数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给所有数字起一个名字&lt;/li&gt;&#xA;&lt;li&gt;直接使用字符形式的常量，不要使用它的整数形式&lt;/li&gt;&#xA;&lt;li&gt;利用语言去计算对象的大小，从而减少代码修改负担，提高代码简洁性，可以定义一个通用的宏&lt;/li&gt;&#xA;&lt;li&gt;尽可能让编译器来计算数值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;注释的风格&#34;&gt;注释的风格&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注释与代码要始终保持一致&lt;/li&gt;&#xA;&lt;li&gt;不要写没用的注释&lt;/li&gt;&#xA;&lt;li&gt;用好的命名代替注释&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用注释自动生成文档&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;阿里代码规约&#34;&gt;阿里代码规约&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/p3c&#34;&gt;https://github.com/alibaba/p3c&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>python程序设计</title>
      <link>https://y-m-m.github.io/post/python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;考核&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在线作业 30分 oj 10.91.145.2&lt;/li&gt;&#xA;&lt;li&gt;小作业 30分 使用第三方工具，完成数据的爬取，处理和展示&lt;/li&gt;&#xA;&lt;li&gt;大作业 40分 综合使用数据处理工具，爬去网站信息，并对数据进行处理、分析和可视化展示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;python语言介绍&#34;&gt;python语言介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;python语言的基本特点&#34;&gt;python语言的基本特点&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python是一种动态类型的，解释性的高级编程语言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态类型：变量类型在程序运行前确定&lt;/li&gt;&#xA;&lt;li&gt;动态类型：变量类型在程序执行时确定，可以改变&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;语法简洁易读，编程模式非常符合人类的思维方式和习惯&lt;/li&gt;&#xA;&lt;li&gt;通用、跨平台&lt;/li&gt;&#xA;&lt;li&gt;强大的社区支持&lt;/li&gt;&#xA;&lt;li&gt;理想的“胶水语言”：具有跨语言跨平台跨技术栈的强大整合能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python语言的优势&#34;&gt;python语言的优势&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;语法简洁，同时提供丰富的数据结构和标准库&lt;/li&gt;&#xA;&lt;li&gt;易学易用，学习周期短，开发效率高&#xA;&lt;ul&gt;&#xA;&lt;li&gt;语法接近自然语言&lt;/li&gt;&#xA;&lt;li&gt;虽然代码执行效率没有编译型语言高，能够节省编程时间&lt;/li&gt;&#xA;&lt;li&gt;第三方库几乎覆盖所有技术领域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python语言的缺点&#34;&gt;python语言的缺点&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;动态解释型语言，运行速度慢&lt;/li&gt;&#xA;&lt;li&gt;全局解释器锁(GIL)限制多线程并发&lt;/li&gt;&#xA;&lt;li&gt;源代码不能加密&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python相关组织&#34;&gt;python相关组织&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python软件基金会PSF&lt;/li&gt;&#xA;&lt;li&gt;python社区 指导委员会&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;python安装&#34;&gt;python安装&lt;/h1&gt;&#xA;&lt;h2 id=&#34;在命令行窗口使用repl&#34;&gt;在命令行窗口使用REPL&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;REPL是一种交互式编程环境，通常用于解释型编程语言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Read&lt;/li&gt;&#xA;&lt;li&gt;Eval&lt;/li&gt;&#xA;&lt;li&gt;Print&lt;/li&gt;&#xA;&lt;li&gt;Loop&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;在命令行窗口运行py文件&#34;&gt;在命令行窗口运行.py文件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python file.py&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python集成开发环境推荐&#34;&gt;python集成开发环境推荐&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;PyCharm&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Subime Text&lt;/li&gt;&#xA;&lt;li&gt;Vim&lt;/li&gt;&#xA;&lt;li&gt;GNU Emacs&lt;/li&gt;&#xA;&lt;li&gt;IDLE&lt;/li&gt;&#xA;&lt;li&gt;Atom&lt;/li&gt;&#xA;&lt;li&gt;Spyder&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Eclipse&lt;/li&gt;&#xA;&lt;li&gt;Eric Python&lt;/li&gt;&#xA;&lt;li&gt;Wing&lt;/li&gt;&#xA;&lt;li&gt;PyScripter&lt;/li&gt;&#xA;&lt;li&gt;Pyzo&lt;/li&gt;&#xA;&lt;li&gt;Thonny&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考书&#34;&gt;参考书&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python语言程序设计基础(第2版) 嵩天，礼欣，黄天宇著&lt;/li&gt;&#xA;&lt;li&gt;零基础入门学习Python(第2版) 小甲鱼(李佳宁)著&lt;/li&gt;&#xA;&lt;li&gt;python变成从入门到实践(第3版)&lt;/li&gt;&#xA;&lt;li&gt;python基础教程(第3版) Magnus Lie Hetland&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;python基本语法&#34;&gt;python基本语法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;python程序基本结构&#34;&gt;python程序基本结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;简单语句：写在一行内的语句&lt;/li&gt;&#xA;&lt;li&gt;复合语句，包含其他语句(组)的语句，需要缩进来表示语句块的层次结构(除了要求缩进的情况，其他情况不能缩进)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;条件语句 if elif else&#xA;&lt;ul&gt;&#xA;&lt;li&gt;句头、句体&lt;/li&gt;&#xA;&lt;li&gt;句头后面都是冒号结尾&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;循环语句 for while&lt;/li&gt;&#xA;&lt;li&gt;函数定义 def&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;注释 #&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;物理行和逻辑行&#34;&gt;物理行和逻辑行&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;物理行：回车&lt;/li&gt;&#xA;&lt;li&gt;逻辑行：根据显式或隐式行拼接规则所拼接在一起的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;显示拼接行 \结尾&lt;/li&gt;&#xA;&lt;li&gt;隐式拼接行 圆括号、方括号、花括号内的表达式可以分成多个物理行，不必使用反斜杠&#xA;&lt;ul&gt;&#xA;&lt;li&gt;隐式行拼接可含注释&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;c和python程序的语法结构比较&#34;&gt;C和Python程序的语法结构比较&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;C语言&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;python&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;引用外部模块&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;#include&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;import 内置函数和对象直接调用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;程序入口&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;main()函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;从第一行开始执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;语句结束标志&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;换行符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;代码起始/结束标志&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;{}&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;对齐缩进&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;标识符和保留字&#34;&gt;标识符和保留字&lt;/h2&gt;&#xA;&lt;h3 id=&#34;python标识符&#34;&gt;python标识符&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用来命名变量、函数、类、对象、模块等的名称&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字符集：在ASCII字符集范围内，大小写字母(A&lt;del&gt;Z, a&lt;/del&gt;z)、数字(0~9)、下划线(_)&lt;/li&gt;&#xA;&lt;li&gt;首字母：不能以数字开头&lt;/li&gt;&#xA;&lt;li&gt;大小写：区分大小写&lt;/li&gt;&#xA;&lt;li&gt;保留字&lt;/li&gt;&#xA;&lt;li&gt;长度：语言对长度没有限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;python保留字&#34;&gt;python保留字&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关键字(保留字)&lt;/li&gt;&#xA;&lt;li&gt;软关键字&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python新增match语句，把match, case,_定义为软关键字，仅在match语句内部作为关键字&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python变量和赋值语句&#34;&gt;python变量和赋值语句&lt;/h2&gt;&#xA;&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量：在python中，可以将变量视为指向值(数据对象)的标识符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;赋值语句&#34;&gt;赋值语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;赋值语句：变量=表达式&lt;/li&gt;&#xA;&lt;li&gt;python作为动态类型语言，变量使用前不需要声明其类型，变量的首次赋值就是其创建过程，变量的类型就是赋值给它的类型&lt;/li&gt;&#xA;&lt;li&gt;重新赋值不仅可以改变变量的值，也可以改变变量的类型&lt;/li&gt;&#xA;&lt;li&gt;在python中，&amp;rsquo;=&amp;lsquo;不是运算符，变量=表达式是赋值语句，不是赋值表达式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x = (y = y + 1)用法错误&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;赋值语句支持链式赋值&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x = y = z = 5&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;赋值语句支持多重赋值&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x, y, z = 5, &amp;lsquo;a&amp;rsquo;, 1.5&lt;/li&gt;&#xA;&lt;li&gt;例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交换两个变量的值 a, b = b, a&lt;/li&gt;&#xA;&lt;li&gt;从列表中取值&#xA;&lt;ul&gt;&#xA;&lt;li&gt;list = [1, 2, 3]&lt;/li&gt;&#xA;&lt;li&gt;a, b, c = list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;python3.8中，新增了表达式，操作符为:=&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x := (y := y + 1) 合法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;python中的常量&#34;&gt;python中的常量&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常量，在程序执行中其值不会改变的变量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;python没有提供const，没有真正意义上的常量&lt;/li&gt;&#xA;&lt;li&gt;一般默认全大写的变量不会修改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;python数据类型&#34;&gt;python数据类型&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本数据类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有一种类型int没有固定的最大值限制，实际受限于可用内存&lt;/li&gt;&#xA;&lt;li&gt;可以使用多种进制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;十进制 除了0以外，首位不能是0&lt;/li&gt;&#xA;&lt;li&gt;二进制0b或0B&lt;/li&gt;&#xA;&lt;li&gt;八进制0o或0O&lt;/li&gt;&#xA;&lt;li&gt;十六进制0x或0X&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;浮点型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可用十进制或科学计数法表示&lt;/li&gt;&#xA;&lt;li&gt;采用十进制表示时，可以省略小数或整数部分，只要保留小数点&lt;/li&gt;&#xA;&lt;li&gt;科学计数法使用e或E来表示幂&lt;/li&gt;&#xA;&lt;li&gt;数值范围存在限制，小树精度也存在限制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;合法，等同于10.0(省略了小数部分)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;.1 合法&lt;/li&gt;&#xA;&lt;li&gt;1E+10 合法&lt;/li&gt;&#xA;&lt;li&gt;1e10 合法&lt;/li&gt;&#xA;&lt;li&gt;3.14e-3 合法&lt;/li&gt;&#xA;&lt;li&gt;0e0&lt;/li&gt;&#xA;&lt;li&gt;1 呃0 不合法，内部不能有空格&lt;/li&gt;&#xA;&lt;li&gt;01e010 合法，浮点数解析时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;组合数据类型&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>计算机网络课程设计</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%BD%91%E8%AF%BE%E8%AE%BE/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%BD%91%E8%AF%BE%E8%AE%BE/</guid>
      <description>&lt;h1 id=&#34;题目-dns中继服务器的实现&#34;&gt;题目 DNS中继服务器的实现&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计一个DNS服务器程序，读入“域名-IP地址”对照表（一个文件），当客户端查询域名对应的IP地址时，用域名检索该对照表，得到三种检索结果：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检索结果为IP地址0.0.0.0，则向客户端返回“域名不存在”的报错信息（不良网站拦截功能）&lt;/li&gt;&#xA;&lt;li&gt;检索结果为普通IP地址，则向客户返回这个地址（服务器功能）&lt;/li&gt;&#xA;&lt;li&gt;表中未检测到该域名，则向因特网DNS服务器发出查询，并将结果返回给客户端（中继功能）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;考虑多个计算机上的客户端会同时查询，需要进行消息ID的转换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;dns介绍&#34;&gt;DNS介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dns查询过程迭代查询&#34;&gt;DNS查询过程(迭代查询)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端向DNS服务器发起查询请求&lt;/li&gt;&#xA;&lt;li&gt;DNS搜索本地解析库没有结果。向根域发起查询请求，根域告诉DNS服务器，.com服务器上有它需要的资源&lt;/li&gt;&#xA;&lt;li&gt;DNS服务器又向.com服务器发起请求，.com服务器告诉DNS服务器，.google.com上有它需要的资源&lt;/li&gt;&#xA;&lt;li&gt;DNS服务器又向.google.com服务器发起请求，得到解析记录，并返回给了客户端。用户提供一种名称，查询以得到另一种名称：域名-&amp;gt;IP或IP-&amp;gt;域名&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dns报文&#34;&gt;DNS报文&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;构成&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-06-24%2021.06.06.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;格式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;除Header外其余四部分为可变长度(12字节长)&lt;/li&gt;&#xA;&lt;li&gt;Question: the question for the name server&lt;/li&gt;&#xA;&lt;li&gt;Answer: RRs answering the question&lt;/li&gt;&#xA;&lt;li&gt;Authority: RRs pointing toward an authority&lt;/li&gt;&#xA;&lt;li&gt;Additional: RRs holding additional information&lt;/li&gt;&#xA;&lt;li&gt;后三段格式相同，每段都是由0~n个资源记录(Resource Record)构成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;报头字段 12字节&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-06-24%2021.10.12.png&#34; alt=&#34;Header Section Format&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ID&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由客户程序设置并由服务器返回结果。客户程序通过它来确定响应与查询是否匹配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;QR：0表示查询报，1表示响应报&lt;/li&gt;&#xA;&lt;li&gt;OPCODE&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通常值为0(标准查询)，其他值为1(反向查询)和2(服务器状态请求)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AA：权威答案&lt;/li&gt;&#xA;&lt;li&gt;TC：截断的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应答的总长度超过512字节时，只返回前512个字节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RD：期望递归&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询报中设置，响应报中返回&lt;/li&gt;&#xA;&lt;li&gt;告诉名字服务器处理递归查询&lt;/li&gt;&#xA;&lt;li&gt;如果该位为1，则递归查询&lt;/li&gt;&#xA;&lt;li&gt;如果该位为0，且被请求的名字服务器没有一个权威回答，就返回一个能解答该查询的其他名字服务器列表，这称为迭代查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RA：递归可用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果名字服务器支持递归查询，则在响应中该比特设置为1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Z：必须为0，保留字段&lt;/li&gt;&#xA;&lt;li&gt;RCODE：响应码，仅用于响应报&#xA;&lt;ul&gt;&#xA;&lt;li&gt;值为0(没有差错)&lt;/li&gt;&#xA;&lt;li&gt;值为3表示名字差错。从权威名字服务器返回，表示在查询中指定域名不存在&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;QDCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of entries in the question section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ANCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of RRs in the answer section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;NSCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of name server RRs in authority records section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ARCOUNT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number of RRs in additional records section&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Question Section Format&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-06-24%2021.25.28.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机组成原理bilibili版</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86bilibili%E7%89%88/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86bilibili%E7%89%88/</guid>
      <description>&lt;h1 id=&#34;第一章-计算机系统概述&#34;&gt;第一章 计算机系统概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-1-计算机系统的组成&#34;&gt;1-1 计算机系统的组成&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件系统（软件需要在硬件上运行）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统软件：为管理整个计算机系统所编制的程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统 数据库管理系统 网络系统&lt;/li&gt;&#xA;&lt;li&gt;标准程序库 语言处理程序 服务程序&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用软件：为实现用户应用所编制的各种程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;科学计算 数据处理&lt;/li&gt;&#xA;&lt;li&gt;过程控制 事务管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;硬件系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机&lt;/li&gt;&#xA;&lt;li&gt;外设&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;计算机系统性能的好坏，取决于硬件和软件功能的总和&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-2-计算机的发展电子数字计算机&#34;&gt;1-2 计算机的发展（电子数字计算机）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;图灵机：理想的计算模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种具备读写、存储等功能的通用计算机模型&lt;/li&gt;&#xA;&lt;li&gt;一条带子，一个读写头和一个控制装置，能执行任何给定的计算，能执行任何可能的任务&lt;/li&gt;&#xA;&lt;li&gt;奠定了现代计算机的基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;1938年 信息论创始人 香农-&amp;gt;布尔代数与开关电路的联系&lt;/li&gt;&#xA;&lt;li&gt;世界上第一台真正意义上的电子数字计算机 阿塔纳索夫-贝瑞计算机ABC 300个电子管，不可编程，仅用于求解线性方程组&lt;/li&gt;&#xA;&lt;li&gt;1946，基于ABC计算机-&amp;gt;电子数字积分机和计算机ENIAC 十进制、弹道参数计算 莫克利和艾克特得到美国军方的支持和冯·诺依曼等人的帮助&lt;/li&gt;&#xA;&lt;li&gt;四个发展阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第1代1946-1957 电子管（真空管） 使用机器语言编程，无操作系统&lt;/li&gt;&#xA;&lt;li&gt;第2代1958-1-64 晶体管 主要使用汇编语言编程，开始使用FORTRAN、COBOL等高等语言，单道批处理系统&lt;/li&gt;&#xA;&lt;li&gt;第3代1965-1971 集成电路 高级语言进一步发展，出现了B语言（C语言的前身），多道批处理系统，分时系统&lt;/li&gt;&#xA;&lt;li&gt;第4代1972至今，超大规模集成电路 各种高级语言，现代操作系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;体积越小、功耗月底、可靠性越高、速度越快-&amp;gt;依赖于电子器件的发展&lt;/li&gt;&#xA;&lt;li&gt;摩尔定律：半导体集成电路上可容纳的晶体管数量大约每经过18-24个月便会增加一倍。换言之，处理器的性能大约每两年翻一倍，同时价格下降为之前的一半 （从2013年开始，减缓为3年翻一番&lt;/li&gt;&#xA;&lt;li&gt;软件发展&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器语言&lt;/li&gt;&#xA;&lt;li&gt;汇编语言&lt;/li&gt;&#xA;&lt;li&gt;高级语言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一个高级语言FORTRAN&lt;/li&gt;&#xA;&lt;li&gt;最简单的语言Basic&lt;/li&gt;&#xA;&lt;li&gt;里程碑Pascal&lt;/li&gt;&#xA;&lt;li&gt;现代程序语革命的起点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;面向对象&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++&lt;/li&gt;&#xA;&lt;li&gt;Java&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当前计算机发展趋势&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更微型化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;低功耗&lt;/li&gt;&#xA;&lt;li&gt;较高性能&lt;/li&gt;&#xA;&lt;li&gt;多用途&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;更巨型化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超高速&lt;/li&gt;&#xA;&lt;li&gt;并行处理&lt;/li&gt;&#xA;&lt;li&gt;智能化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;目前我国最快的超级计算机是神威·太湖之光，每秒可进行9.3亿亿次浮点运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-3-计算机硬件&#34;&gt;1-3 计算机硬件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;冯诺依曼计算机&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机网络bilibili版</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cbilibili%E7%89%88/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cbilibili%E7%89%88/</guid>
      <description>&lt;p&gt;bilibili 计算机网络微课堂&lt;/p&gt;&#xA;&lt;h1 id=&#34;p1-概述&#34;&gt;P1 概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-计算机网络在信息时代的作用&#34;&gt;1.1 计算机网络在信息时代的作用&lt;/h2&gt;&#xA;&lt;h2 id=&#34;12-因特网概述&#34;&gt;1.2 因特网概述&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络互联网和因特网&#34;&gt;网络、互联网和因特网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络Network：若干节点Node和连接这些节点的链路Link组成&lt;/li&gt;&#xA;&lt;li&gt;多个网络还可以通过路由器互联起来，这样就构成了一个范围更大的网络，即互联网，因此，互联网是“网络的网络”&lt;/li&gt;&#xA;&lt;li&gt;因特网Internet是世界上最大的互联网络&lt;/li&gt;&#xA;&lt;li&gt;区别Internet（因特网，采用TCP/IP协议） 和 internet（互联网）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;因特网发展的三个阶段&#34;&gt;因特网发展的三个阶段&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从单个网络ARPANET向互联网发展&lt;/li&gt;&#xA;&lt;li&gt;逐步建成三级结构的因特网&lt;/li&gt;&#xA;&lt;li&gt;逐步形成了多层次的ISP结构的因特网&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;基于isp的三层结构的因特网&#34;&gt;基于ISP的三层结构的因特网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因特网服务提供者ISP(Internet Service Provider)&lt;/li&gt;&#xA;&lt;li&gt;国际性区域（主干网） 第一层ISP&lt;/li&gt;&#xA;&lt;li&gt;区域性或国家性覆盖规模 第二层ISP 大公司&lt;/li&gt;&#xA;&lt;li&gt;本地ISP 校园网、企业网、住宅用户、无线移动&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;因特网的标准化工作&#34;&gt;因特网的标准化工作&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因特网的标准化工作对因特网的发展起到了非常重要的作用&lt;/li&gt;&#xA;&lt;li&gt;面向公众&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RFC技术文档可以免费下载&lt;/li&gt;&#xA;&lt;li&gt;任何人都可以随时用电子邮件发表对某个文档的意见或建议&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;因特网协会ISOC是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和作用&lt;/li&gt;&#xA;&lt;li&gt;制定因特网的正式标准需要经过以下4个阶段：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因特网草案（还不是RFC文档）&lt;/li&gt;&#xA;&lt;li&gt;建议标准（从这个阶段开始就成为RFC文档）&lt;/li&gt;&#xA;&lt;li&gt;草案标准&lt;/li&gt;&#xA;&lt;li&gt;因特网标准&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;因特网的组成&#34;&gt;因特网的组成&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;边缘部分：由多有连接在因特网上的主机组成，是用户直接使用的，用来进行通信和资源共享&lt;/li&gt;&#xA;&lt;li&gt;核心部分：由大量网络和连接这些网络的路由器组成，这部分市委边缘部分提供服务的（提供连通性和交换）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;路由器：专用计算机，不称之为主机，是实现分组交换的关键部件，转发收到的分组&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;13-三种交换方式&#34;&gt;1.3 三种交换方式&lt;/h2&gt;&#xA;&lt;h3 id=&#34;电路交换circuit-switching&#34;&gt;电路交换circuit switching&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;电话两两连接&lt;/li&gt;&#xA;&lt;li&gt;中间介质：电话交换机&lt;/li&gt;&#xA;&lt;li&gt;电话交换机接通电话线的方式&lt;/li&gt;&#xA;&lt;li&gt;从通信资源的分配角度来看，交换就是按照某种方式动态地分配传输线路的资源&lt;/li&gt;&#xA;&lt;li&gt;用户线为单个用户所有&lt;/li&gt;&#xA;&lt;li&gt;电话交换机之间的中继线共用&lt;/li&gt;&#xA;&lt;li&gt;电路交换的三个步骤&#xA;&lt;ul&gt;&#xA;&lt;li&gt;建立连接（分配通信资源）&lt;/li&gt;&#xA;&lt;li&gt;通话（一直占用通信资源）&lt;/li&gt;&#xA;&lt;li&gt;释放连接（归还通信资源）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用电路交换来传送计算机数据时，其线路的传输效率往往很低&lt;/li&gt;&#xA;&lt;li&gt;比特流直达终点&lt;/li&gt;&#xA;&lt;li&gt;优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通信时延小&lt;/li&gt;&#xA;&lt;li&gt;有序传输&lt;/li&gt;&#xA;&lt;li&gt;没有冲突&lt;/li&gt;&#xA;&lt;li&gt;适用范围广（模拟信号、数字信号）&lt;/li&gt;&#xA;&lt;li&gt;实时性强&lt;/li&gt;&#xA;&lt;li&gt;控制简单&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;建立连接时间长&lt;/li&gt;&#xA;&lt;li&gt;线路独占、使用效率低&lt;/li&gt;&#xA;&lt;li&gt;灵活性差&lt;/li&gt;&#xA;&lt;li&gt;难以规格化（不同类型、不同速率的终端难以进行通信，难以进行差错控制）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分组交换packet-switching&#34;&gt;分组交换Packet Switching&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算机网络通常采用&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向对象程序设计(C&#43;&#43;)</title>
      <link>https://y-m-m.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1c&#43;&#43;/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1c&#43;&#43;/</guid>
      <description>&lt;h1 id=&#34;参考书目&#34;&gt;参考书目&lt;/h1&gt;&#xA;&lt;h2 id=&#34;入门级别&#34;&gt;入门级别&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++面向对象程序设计，龚晓庆编著，清华大学出版社&lt;/li&gt;&#xA;&lt;li&gt;Essential C++中文版，Stanley B.Lippman著，华中科技大学出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;大全类&#34;&gt;大全类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++程序设计语言，Bjarne Stroustrup著，机械工业出版社&lt;/li&gt;&#xA;&lt;li&gt;C++ Primer中文版，Stanley B.Lippman等著，人民邮电出版社&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;高阶进阶类&#34;&gt;高阶进阶类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Effective C++, More Effective C++, Thinking in C++&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;考核方式&#34;&gt;考核方式&lt;/h1&gt;&#xA;&lt;h2 id=&#34;主要考核应用编程实践的完成情况和能力&#34;&gt;主要考核应用编程实践的完成情况和能力&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须完成的内容：课上的作业、综合编程练习&lt;/li&gt;&#xA;&lt;li&gt;每个同学必须独立完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;课件资料实验安排及通知等&#34;&gt;课件资料、实验安排及通知等&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;课堂上&lt;/li&gt;&#xA;&lt;li&gt;爱课堂、QQ群&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;答疑提交作业方式&#34;&gt;答疑、提交作业方式&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;邮箱:bupthomework@163.com&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;程序设计语言的发展&#34;&gt;程序设计语言的发展&lt;/h2&gt;&#xA;&lt;h3 id=&#34;硬件语言&#34;&gt;硬件语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器语言&lt;/li&gt;&#xA;&lt;li&gt;汇编语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;非结构化语言&#34;&gt;非结构化语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FORTRAN&lt;/li&gt;&#xA;&lt;li&gt;BASIC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;结构化的语言&#34;&gt;结构化的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PASCAL 允许嵌套&lt;/li&gt;&#xA;&lt;li&gt;C 不允许嵌套&lt;/li&gt;&#xA;&lt;li&gt;Ada&lt;/li&gt;&#xA;&lt;li&gt;Alogol&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;面向对象的语言&#34;&gt;面向对象的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Smalltalk&lt;/li&gt;&#xA;&lt;li&gt;C++&lt;/li&gt;&#xA;&lt;li&gt;Java&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;组件编程&#34;&gt;组件编程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.net&lt;/li&gt;&#xA;&lt;li&gt;C#/C++/Java&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;新出现的语言&#34;&gt;新出现的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python(动态的、面向对象的脚本语言)&lt;/li&gt;&#xA;&lt;li&gt;Go(静态强类型、编译型、并发型)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;结构化程序设计面向过程&#34;&gt;结构化程序设计（面向过程）&lt;/h2&gt;&#xA;&lt;h3 id=&#34;自顶向下逐步求精模块化&#34;&gt;自顶向下，逐步求精，模块化&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先考虑总体，后考虑细节；先考虑全局目标，后考虑局部目标&lt;/li&gt;&#xA;&lt;li&gt;对复杂问题，分解成若干简单问题，确立子目标，逐步细节化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;限制直接跳转goto的应用&#34;&gt;限制直接跳转（goto）的应用&lt;/h3&gt;&#xA;&lt;h3 id=&#34;程序算法数据结构&#34;&gt;程序=算法+数据结构&lt;/h3&gt;&#xA;&lt;h2 id=&#34;面向对象程序设计&#34;&gt;面向对象程序设计&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用对象模型来描述或解决现实世界中的问题（以对象为核心）&lt;/li&gt;&#xA;&lt;li&gt;大幅度提高软件开发的成功率，提高软件的可移植性、重用性和可靠性，减少日后的维护费用&lt;/li&gt;&#xA;&lt;li&gt;特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对象模型，对象概念再从建模到构建程序的各个方面广泛使用&lt;/li&gt;&#xA;&lt;li&gt;抽象化，对象的属性进行抽象&lt;/li&gt;&#xA;&lt;li&gt;封装性，对对象的操作被封装在特定的作用范围&lt;/li&gt;&#xA;&lt;li&gt;多态性，派生对象的操作（方法）可以存在不同实现&lt;/li&gt;&#xA;&lt;li&gt;继承性，方法和属性可以在类间被继承和传递&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;c与c的关系&#34;&gt;C++与C的关系&lt;/h2&gt;&#xA;&lt;h3 id=&#34;c源于c语言&#34;&gt;C++源于C语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;C语言是在B语言的基础上发展起来的&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机组成原理</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;bupt的计算机组成原理课的笔记&lt;/p&gt;&#xA;&lt;h2 id=&#34;成绩构成&#34;&gt;成绩构成&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件实验20%&lt;/li&gt;&#xA;&lt;li&gt;期中考试10%&lt;/li&gt;&#xA;&lt;li&gt;平时作业10%&lt;/li&gt;&#xA;&lt;li&gt;期末考试60%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第一章-计算机概述&#34;&gt;第一章 计算机概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;计算机分类和应用&#34;&gt;计算机分类和应用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;通用计算机分类&#34;&gt;通用计算机分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单片机&lt;/li&gt;&#xA;&lt;li&gt;微型机&lt;/li&gt;&#xA;&lt;li&gt;工作站&lt;/li&gt;&#xA;&lt;li&gt;服务器&lt;/li&gt;&#xA;&lt;li&gt;大型机&lt;/li&gt;&#xA;&lt;li&gt;超级计算机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;面向应用的分类&#34;&gt;面向应用的分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通用计算机：具有计算机的标准形态，通过安装不同的应用软件，以相似的外观呈现并应用在各行各业&lt;/li&gt;&#xA;&lt;li&gt;专用计算机/嵌入式计算机：安装或嵌入到交通工具、仪器仪表、控制系统、通信设备和家电产品等中的模块化计算机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机的应用领域&#34;&gt;计算机的应用领域&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;科学计算&lt;/li&gt;&#xA;&lt;li&gt;信息处理&lt;/li&gt;&#xA;&lt;li&gt;实时控制&lt;/li&gt;&#xA;&lt;li&gt;人工智能&lt;/li&gt;&#xA;&lt;li&gt;计算机辅助设计&lt;/li&gt;&#xA;&lt;li&gt;医疗保健、教育、工业制造、娱乐和游戏等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机发展简史&#34;&gt;计算机发展简史&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机的演进&#34;&gt;计算机的演进&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第0代 机械时代(BC-1940)&lt;/li&gt;&#xA;&lt;li&gt;第1代 电子管时代(1946-1957) 数据处理机&lt;/li&gt;&#xA;&lt;li&gt;第2代 晶体管时代(1958-1964) 工业控制机&lt;/li&gt;&#xA;&lt;li&gt;第3代 集成电路时代(1965-1971) 小型计算机&lt;/li&gt;&#xA;&lt;li&gt;第4代 超大规模集成电路时代(1972-1990) 微型计算机&lt;/li&gt;&#xA;&lt;li&gt;第5代 巨大规模集成电路计算机(1991年开始) 单片计算机&lt;/li&gt;&#xA;&lt;li&gt;第6代 量子计算机、光计算机、生物计算机？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;世界上第一台计算机eniac&#34;&gt;世界上第一台计算机ENIAC&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1946美国宾夕法尼亚大学&lt;/li&gt;&#xA;&lt;li&gt;Mauchly和Eckert设计&lt;/li&gt;&#xA;&lt;li&gt;十进制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ias计算机&#34;&gt;IAS计算机&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Von Neumann机，冯·诺伊曼结构计算机&lt;/li&gt;&#xA;&lt;li&gt;“存储程序”计算机&lt;/li&gt;&#xA;&lt;li&gt;1945年冯·诺伊曼/图灵同时提出“存储程序“思想&lt;/li&gt;&#xA;&lt;li&gt;采用二进制数据&lt;/li&gt;&#xA;&lt;li&gt;只实现整数运算&lt;/li&gt;&#xA;&lt;li&gt;五大功能部件，是后来通用计算机的原型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机技术飞速发展&#34;&gt;计算机技术飞速发展&lt;/h3&gt;&#xA;&lt;h3 id=&#34;硬件定律&#34;&gt;硬件定律&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信号传输速度赶不上光速&lt;/li&gt;&#xA;&lt;li&gt;内存赶不上CPU速度&lt;/li&gt;&#xA;&lt;li&gt;软件赶不上硬件&lt;/li&gt;&#xA;&lt;li&gt;Moore&amp;rsquo;s Law：集成电路芯片中晶体管数量大体上每2年翻一番，或者价格下降一半&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机的性能指标&#34;&gt;计算机的性能指标&lt;/h3&gt;&#xA;&lt;h4 id=&#34;容量&#34;&gt;容量&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地址寄存器位数N&lt;/li&gt;&#xA;&lt;li&gt;数据寄存器位数M&lt;/li&gt;&#xA;&lt;li&gt;总容量 = 存储单元个数 * 存储字长 bit = 2&lt;!-- raw HTML omitted --&gt;N&lt;!-- raw HTML omitted --&gt; * M bit&lt;/li&gt;&#xA;&lt;li&gt;K:2&lt;!-- raw HTML omitted --&gt;10&lt;!-- raw HTML omitted --&gt;, M:2&lt;!-- raw HTML omitted --&gt;20&lt;!-- raw HTML omitted --&gt;, G:2&lt;!-- raw HTML omitted --&gt;30&lt;!-- raw HTML omitted --&gt;, T:2&lt;!-- raw HTML omitted --&gt;40&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;速度&#34;&gt;速度&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器字长(处理机字长)：指处理机运算其中一次能够完成二进制数运算的位数。（一般等于内部寄存器的位数）&lt;/li&gt;&#xA;&lt;li&gt;CLK CPU的时钟周期，时钟周期越长，频率越慢 主频：主时钟的频率&lt;/li&gt;&#xA;&lt;li&gt;CPI：每条指令执行所需要的时钟周期数，或每条指令执行所需的平均时钟周期数 指令耗时=CPI*CPU时钟周期&lt;/li&gt;&#xA;&lt;li&gt;MIPS(Million Instructions Per Second)（每秒百万指令数 MIPS=(指令总数/程序执行时间)*10&lt;!-- raw HTML omitted --&gt;-6&lt;!-- raw HTML omitted --&gt;）&lt;/li&gt;&#xA;&lt;li&gt;FLOPS：每秒执行浮点操作的次数&lt;/li&gt;&#xA;&lt;li&gt;MFLOPS：每秒百万次浮点操作次数&lt;/li&gt;&#xA;&lt;li&gt;GFLOPS：每秒十亿次浮点操作次数&lt;/li&gt;&#xA;&lt;li&gt;TFLOPS：每秒万亿次浮点操作次数&lt;/li&gt;&#xA;&lt;li&gt;总线宽度：数据总线一次所能并行传送信息的位数&lt;/li&gt;&#xA;&lt;li&gt;存储器带宽：单位时间内从存储器读出的字节数，一般用字节数/秒表示&lt;/li&gt;&#xA;&lt;li&gt;吞吐量：表征一台计算机在某一时间间隔内能够处理的信息量，单位是字节/秒(B/S)&lt;/li&gt;&#xA;&lt;li&gt;响应时间：指从用户向计算机发送一个请求，到系统对该请求作出响应并获得它所需要的结果的等待时间&lt;/li&gt;&#xA;&lt;li&gt;利用率：在给定的时间间隔内系统被实际使用的时间所占的比率，用百分比表示&lt;/li&gt;&#xA;&lt;li&gt;存储器容量：存储器中所有存储单元的总数目，通常用KB、MB、GB、TB来表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机的硬件&#34;&gt;计算机的硬件&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机组成&#34;&gt;计算机组成&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机由运算器、控制器、存储器、输入设备和输出设备五大部件组成&lt;/li&gt;&#xA;&lt;li&gt;在机器内部，指令和数据均以二进制码表示&lt;/li&gt;&#xA;&lt;li&gt;机器以运算器为中心，数据传送都经过运算器&lt;/li&gt;&#xA;&lt;li&gt;存储程序式计算机&lt;/li&gt;&#xA;&lt;li&gt;基于总线的计算机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机的软件&#34;&gt;计算机的软件&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机软件分类&#34;&gt;计算机软件分类&lt;/h3&gt;&#xA;&lt;h4 id=&#34;系统程序管理整个操作系统使系统资源得到合理调度&#34;&gt;系统程序：管理整个操作系统，使系统资源得到合理调度&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统&lt;/li&gt;&#xA;&lt;li&gt;服务程序：调试程序、诊断程序、排错程序、联系程序等&lt;/li&gt;&#xA;&lt;li&gt;语言程序：汇编器、编译器、解释程序&lt;/li&gt;&#xA;&lt;li&gt;数据库管理系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;应用程序完成用户的特定任务使用系统软件提供的资源接口&#34;&gt;应用程序：完成用户的特定任务，使用系统软件提供的资源接口&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EDA设计软件&lt;/li&gt;&#xA;&lt;li&gt;数据处理软件&lt;/li&gt;&#xA;&lt;li&gt;社交娱乐&lt;/li&gt;&#xA;&lt;li&gt;办公软件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机系统的层次结构&#34;&gt;计算机系统的层次结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一级为微程序设计级(逻辑电路级)，或硬布线级。是一个实际机器层，由硬件直接执行微指令。&lt;/li&gt;&#xA;&lt;li&gt;第二级为一般机器级，也称为机器语言级。由为程序解释机器指令系统。这一级也是硬件级&lt;/li&gt;&#xA;&lt;li&gt;第三级为操作系统级。用于对计算机系统的软硬件资源进行管理和调度，也称为混合级。&lt;/li&gt;&#xA;&lt;li&gt;第四级为汇编语言级。通过汇编器将汇编程序翻译成机器指令。&lt;/li&gt;&#xA;&lt;li&gt;第五级为高级语言级。用汇编程序翻译成第四级的汇编语言程序。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;n层计算机系统层次结构&#34;&gt;n层计算机系统层次结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一层，实际计算机M1，机器语言为L1，由L1编写的程序可以直接由电子电路执行。&lt;/li&gt;&#xA;&lt;li&gt;第二层，虚拟机M2，机器语言为L2，用L2编写的程序需经运行在M1上的解释器解释指行或翻译成L1语言后执行。&lt;/li&gt;&#xA;&lt;li&gt;第三层，虚拟机M3，机器语言为L3，用L3编写的程序需经运行在M2或M1上的解释器解释执行，或翻译成L2或L1语言后执行。&lt;/li&gt;&#xA;&lt;li&gt;第四层，虚拟机M4，机器语言为L4&lt;/li&gt;&#xA;&lt;li&gt;……&lt;/li&gt;&#xA;&lt;li&gt;第n层，虚拟机Mn，起机器语言为Ln，用Ln编写的程序需经运行在更低级别的机器上的解释器解释执行，或翻译成更低级别别机器上语言后执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;软件与硬件的逻辑等价性&#34;&gt;软件与硬件的逻辑等价性&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件：能实现高速的算术逻辑运算功能，但难以实现较复杂的功能或实现的代价太高&lt;/li&gt;&#xA;&lt;li&gt;软件：易于实现各种复杂的算术逻辑运算功能，但是频繁的访存操作制约了处理速度&lt;/li&gt;&#xA;&lt;li&gt;从理论上讲，任何软件算法可以用软件实现，也可以用硬件实现&lt;/li&gt;&#xA;&lt;li&gt;对于某一具体功能，才用硬件方案还是软件方案，取决于设计目标、技术水平、器件价格、速度、可靠性、易维护性和变更周期等因素&lt;/li&gt;&#xA;&lt;li&gt;固件：现在已经可以把许多复杂的、常用的程序制作成所谓的固件。就它的功能来说，是软件；但从形态上来说，又是固件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第二章-运算方法和运算器&#34;&gt;第二章 运算方法和运算器&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数据与文字的表示方法&#34;&gt;数据与文字的表示方法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;数据编码与表示&#34;&gt;数据编码与表示&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机中的数据&lt;/li&gt;&#xA;&lt;li&gt;编码原则&lt;/li&gt;&#xA;&lt;li&gt;二进制码0、1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;无符号数和有符号数&#34;&gt;无符号数和有符号数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无符号数不带符号位&lt;/li&gt;&#xA;&lt;li&gt;有符号数带符号为，最左边的位用作符号位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;计算机中常用的数据表示格式&#34;&gt;计算机中常用的数据表示格式&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定点格式：数值范围有限，处理简单（纯小数或纯整数） 小数点位置固定不限，不是用记号“.“来表示小数点，表示纯小数或纯整数 定点数有一位符号位&lt;/li&gt;&#xA;&lt;li&gt;浮点格式：数值范围很大，处理过程复杂&lt;/li&gt;&#xA;&lt;li&gt;十进制数格式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;真值与机器数&#34;&gt;真值与机器数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;真值是机器数代表的实际的值&lt;/li&gt;&#xA;&lt;li&gt;机器数是真值在机器中的表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数的机器码表示&#34;&gt;数的机器码表示&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将符号为和数值位一起编码&lt;/li&gt;&#xA;&lt;li&gt;小数点：隐含存储&lt;/li&gt;&#xA;&lt;li&gt;真值-机器码/机器数&lt;/li&gt;&#xA;&lt;li&gt;有符号数机器码：原码、补码、反码（方便过渡，通过原码计算补码）、移码（表示偏移值，符号位1表示正数，0表示负数）&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-05%2013.14.23.png&#34; alt=&#34;8位无符号数和有符号数的表示&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;若X为整数，则所有码制表示方法相同&lt;/li&gt;&#xA;&lt;li&gt;原码、反码、补码用1表示-，用0表示+&lt;/li&gt;&#xA;&lt;li&gt;移码用1表示+，用0表示-&lt;/li&gt;&#xA;&lt;li&gt;移码与补码的尾码相同，符号相反&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-05%2013.26.23.png&#34; alt=&#34;数据大小&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据操作&#34;&gt;数据操作&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号位扩展n-&amp;gt;n+k 填充符号位&lt;/li&gt;&#xA;&lt;li&gt;移位操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;左移1位，绝对值扩大，*2&lt;/li&gt;&#xA;&lt;li&gt;右移1位，绝对值缩小，/2&lt;/li&gt;&#xA;&lt;li&gt;算术移位的法则（有符号数的移位法则）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号位保持不动&lt;/li&gt;&#xA;&lt;li&gt;正数：原码、补码、反码均补0&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;负数：原码补0，补码左移补0、右移补1，反码补1&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浮点数的表示方法&#34;&gt;浮点数的表示方法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定点数可表示的数据范围有限，但我们不能无限制的增长数据的长度&lt;/p&gt;</description>
    </item>
    <item>
      <title>形式语言与自动机</title>
      <link>https://y-m-m.github.io/post/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <description>&lt;h1 id=&#34;绪论&#34;&gt;绪论&lt;/h1&gt;&#xA;&lt;h2 id=&#34;形式语言&#34;&gt;形式语言&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是形式语言&#34;&gt;什么是形式语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;形式化描述的字母表上的字符串的集合&lt;/li&gt;&#xA;&lt;li&gt;字母表：字符的有限集合&lt;/li&gt;&#xA;&lt;li&gt;字符串：字母表中的字符构成的有限序列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;为什么用形式语言&#34;&gt;为什么用形式语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自然语言：人们平时说话时所使用的一种语言&lt;/li&gt;&#xA;&lt;li&gt;形式语言：通过人们公认的符号，表达方式所描述的一种语言，是一种通用语言，没有国籍之分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动机&#34;&gt;自动机&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是自动机&#34;&gt;什么是自动机&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具有离散输入输出的数学模型&lt;/li&gt;&#xA;&lt;li&gt;接受一定的输入，执行一定的动作，产生一定的结果。使用状态迁移描述整个工作过程&lt;/li&gt;&#xA;&lt;li&gt;状态：一个标识，能区分自动机在不同时刻的状况。有限状态系统具有任意有限数目的“内部状态‘&lt;/li&gt;&#xA;&lt;li&gt;自动机的本质：根据状态、输入和规则决定下一个状态&lt;/li&gt;&#xA;&lt;li&gt;状态+输入+规则-&amp;gt;状态迁移&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有限状态自动机：由一个带有读头的有限控制器和一条写有字符的输入带组成&lt;/li&gt;&#xA;&lt;li&gt;下推自动机：由一条输入带，一个有限控制器和一个下推栈组成&lt;/li&gt;&#xA;&lt;li&gt;基本图灵机：由一个具有读写头的有限控制器和一条无限带组成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;形式语言与自动机的关系&#34;&gt;形式语言与自动机的关系&lt;/h2&gt;&#xA;&lt;h3 id=&#34;密切相关&#34;&gt;密切相关&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;形式语言：字符串&lt;/li&gt;&#xA;&lt;li&gt;自动机：字符串的识别系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;形式语言&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;自动机&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;非限定性语言&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;图灵机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;上下文有关语言&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;线性有界自动机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;上下文无关语言&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;下推式存贮自动机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;正则语言&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有限自动机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;证明技术&#34;&gt;证明技术&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;证明：命题的序列，其中的每一个命题或者是已知的命题，或者是由前面已经出现过的命题使用逻辑公理和规则得出&lt;/li&gt;&#xA;&lt;li&gt;假设（前提）：已知的命题集合&lt;/li&gt;&#xA;&lt;li&gt;结论：最后一个命题称为该前提的结论&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;演绎证明&#34;&gt;演绎证明&lt;/h3&gt;&#xA;&lt;h4 id=&#34;if-then命题&#34;&gt;if-then命题&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;证明方法：if部分作为已知的命题，then部分作为结论&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;if-and-only-if命题&#34;&gt;if-and-only-if命题&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;证明方法：从两个方向分别证明&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;有关集合的命题&#34;&gt;有关集合的命题&lt;/h4&gt;&#xA;&lt;h3 id=&#34;原命题的逆否命题&#34;&gt;原命题的逆否命题&lt;/h3&gt;&#xA;&lt;h3 id=&#34;反证法&#34;&gt;反证法&lt;/h3&gt;&#xA;&lt;h3 id=&#34;举例证明或否证&#34;&gt;举例证明或否证&lt;/h3&gt;&#xA;&lt;h3 id=&#34;归纳定义与结构归纳法&#34;&gt;归纳定义与结构归纳法&lt;/h3&gt;&#xA;&lt;h4 id=&#34;集合的归纳定义&#34;&gt;集合的归纳定义&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基础（直接定义集合中的元素，至少1个）&lt;/li&gt;&#xA;&lt;li&gt;归纳（从已知元素生成新元素的规则）&lt;/li&gt;&#xA;&lt;li&gt;极小性限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;结构归纳法&#34;&gt;结构归纳法&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基础&lt;/li&gt;&#xA;&lt;li&gt;归纳&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;一般数学归纳法&#34;&gt;一般数学归纳法&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于自然数的归纳&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第二章-语言及文法&#34;&gt;第二章 语言及文法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;语言的定义与运算&#34;&gt;语言的定义与运算&lt;/h2&gt;&#xA;&lt;h3 id=&#34;语言的一些术语&#34;&gt;语言的一些术语&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字母表：字符的有限集合，记为T&lt;/li&gt;&#xA;&lt;li&gt;字符串：由字母表T中的字符构成的序列称字母表T上的字符串（句子）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常记为t,u,v,w,x,y,z&lt;/li&gt;&#xA;&lt;li&gt;常用a,b,c,d来表示单个字符&lt;/li&gt;&#xA;&lt;li&gt;常用a&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;表示n个a的字符串&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;字母表&#34;&gt;字母表&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;概念 形式符号的集合&lt;/li&gt;&#xA;&lt;li&gt;记号 T&lt;/li&gt;&#xA;&lt;li&gt;举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;英文字母表&lt;/li&gt;&#xA;&lt;li&gt;英文标点符号表&lt;/li&gt;&#xA;&lt;li&gt;汉字表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;字符串&#34;&gt;字符串&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字母表T上的一个字符串（串、字），为T中的字符构成的一个有限序列，空串，用ε来表示&lt;/li&gt;&#xA;&lt;li&gt;绝对值符号，表示字符串的长度&lt;/li&gt;&#xA;&lt;li&gt;a的i次幂，表示含有i个a的字符串&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;连接concatenation&#34;&gt;连接concatenation&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;连接运算的性质&#xA;&lt;ul&gt;&#xA;&lt;li&gt;结合律&lt;/li&gt;&#xA;&lt;li&gt;空串是单位元&lt;/li&gt;&#xA;&lt;li&gt;连接后的长度等于各串的长度之和&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;其他运算&#34;&gt;其他运算&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;取头字符&lt;/li&gt;&#xA;&lt;li&gt;取尾部&lt;/li&gt;&#xA;&lt;li&gt;字串匹配&lt;/li&gt;&#xA;&lt;li&gt;前缀、后缀、子串&lt;/li&gt;&#xA;&lt;li&gt;空串是任意串的前缀、后缀及子串&lt;/li&gt;&#xA;&lt;li&gt;字符串的逆：将字符串倒置&lt;/li&gt;&#xA;&lt;li&gt;空串的逆还是它本身&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;字母表的幂运算&#34;&gt;字母表的幂运算&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;（1）T&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 空串 T&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;长度为n的字符串&lt;/li&gt;&#xA;&lt;li&gt;（2）设x在T&lt;!-- raw HTML omitted --&gt;n-1&lt;!-- raw HTML omitted --&gt;中，那么ax在T&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;中&lt;/li&gt;&#xA;&lt;li&gt;（3）T&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;中的元素只能由（1）和（2）构成&lt;/li&gt;&#xA;&lt;li&gt;*闭包 字母表T中的字符所构成的任意长度字符串的集合&lt;/li&gt;&#xA;&lt;li&gt;+闭包 没有空串的*闭包&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;什么是语言&#34;&gt;什么是语言&lt;/h3&gt;&#xA;&lt;h4 id=&#34;概念-1&#34;&gt;概念&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设T为字母表，则任何T的星号闭包的&lt;em&gt;子集&lt;/em&gt;是字母表T上的一个语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;举例&#34;&gt;举例&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;英文单词集&lt;/li&gt;&#xA;&lt;li&gt;C语言程序集&lt;/li&gt;&#xA;&lt;li&gt;汉语成语集&lt;/li&gt;&#xA;&lt;li&gt;化学分子式集&lt;/li&gt;&#xA;&lt;li&gt;空语言与只含空串的语言不一样&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;运算&#34;&gt;运算&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并、交、补&lt;/li&gt;&#xA;&lt;li&gt;语言的积：L&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;和L&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;的积，即L&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;中所有字符串分别与L&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;中的字符串连接而成的，不可交换，满足结合律&lt;/li&gt;&#xA;&lt;li&gt;语言的幂&#xA;&lt;ul&gt;&#xA;&lt;li&gt;L&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;，仅含有空串的集合&lt;/li&gt;&#xA;&lt;li&gt;L&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt; =  L * L&lt;!-- raw HTML omitted --&gt;n-1&lt;!-- raw HTML omitted --&gt; = L&lt;!-- raw HTML omitted --&gt;n-1&lt;!-- raw HTML omitted --&gt; * L   n&amp;gt;=1&lt;/li&gt;&#xA;&lt;li&gt;若L中没有空句子，则L&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;中没有空句子&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;文法&#34;&gt;文法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义语言的一个数学模型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;表示语言的方法&#34;&gt;表示语言的方法&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若语言L是有限集合，可用列举法&lt;/li&gt;&#xA;&lt;li&gt;若语言L是无限集合，用其他方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;文法产生系统，定义文法规则产生出语言的每个句子&lt;/li&gt;&#xA;&lt;li&gt;机器识别系统（自动机），当一个字符串能被一个语言识别系统接受，则这个字符串是该语言的一个句子，否则不属于该语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;元语言&#34;&gt;元语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义：描述语言的语言&lt;/li&gt;&#xA;&lt;li&gt;被讨论的语言叫做对象语言，讨论对象语言的语言成为元语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;bnf巴科斯范式&#34;&gt;BNF（巴科斯范式）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;讨论某种程序设计语言语言的元语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;什么是文法&#34;&gt;什么是文法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;文法是一种元语言，一种方法，根据文法产生出语言的句子&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chomsky文法体系&#34;&gt;Chomsky文法体系&lt;/h2&gt;&#xA;&lt;h3 id=&#34;bnf&#34;&gt;BNF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;lt;标识符&amp;gt;::=&amp;lt;字母&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;标识符&amp;gt;::=&amp;lt;标识符&amp;gt;&amp;lt;字母&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;标识符&amp;gt;::=&amp;lt;标识符&amp;gt;&amp;lt;数字&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;字母&amp;gt;::=a|b|……z|A|B|……|Z&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;数字&amp;gt;::=0|1|……9&lt;/li&gt;&#xA;&lt;li&gt;将::= 改为→表示可被代替&lt;/li&gt;&#xA;&lt;li&gt;用I, L, D分别表示标识符、字母、数字;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;文法生成式集合&#34;&gt;文法生成式集合&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I-&amp;gt;L&lt;/li&gt;&#xA;&lt;li&gt;I-&amp;gt;IL&lt;/li&gt;&#xA;&lt;li&gt;I-&amp;gt;ID&lt;/li&gt;&#xA;&lt;li&gt;L-&amp;gt;a|b|……|z&lt;/li&gt;&#xA;&lt;li&gt;D-&amp;gt;0|1|2|……9&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;文法g是一个四元组gntps&#34;&gt;文法G是一个四元组G=(N，T，P，S)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;N  非终结符的有限集合  I&lt;/li&gt;&#xA;&lt;li&gt;T  终结符的有限集合   N∩T=Φ&lt;/li&gt;&#xA;&lt;li&gt;P 形式为α→β的生成式的有限集合。&lt;/li&gt;&#xA;&lt;li&gt;S  起始符  且S ∈N。 I&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;推导与句型&#34;&gt;推导与句型&lt;/h2&gt;&#xA;&lt;h3 id=&#34;直接推导&#34;&gt;直接推导&lt;/h3&gt;&#xA;&lt;h3 id=&#34;推导序列&#34;&gt;推导序列&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从å&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;到å&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;的直接推导，是长度为n的推导序列&lt;/li&gt;&#xA;&lt;li&gt;从å&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;到å&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;的直接推导，是长度为0的推导序列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;句型和句子&#34;&gt;句型和句子&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;句型包含句子&lt;/li&gt;&#xA;&lt;li&gt;句子是由终结符组成的字符串&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;文法产生的语言&#34;&gt;文法产生的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;L(G)，从文法的起始符开始，利用文法的产生式，所产生的终结符串的集合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chomsky文法体系分类&#34;&gt;Chomsky文法体系分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对生成式的形式作规定，分为0型、1型、2型、3型文法&lt;/li&gt;&#xA;&lt;li&gt;0型文法：无限制文法&lt;/li&gt;&#xA;&lt;li&gt;1型文法：包括上下文有关文法(GSG)-&amp;gt;上下文有关语言(GSL)-&amp;gt;线性有界自动机(LBA) 把计算限制在仅仅包含输入的那一段带上的图灵机，可作为上下文有关语言的识别接受器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;左部的长度小于右部&lt;/li&gt;&#xA;&lt;li&gt;不含空串&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2型文法：上下文无关文法(CFG)-&amp;gt;上下文无关语言(CFL)-&amp;gt;下推自动机(PDA)，左部是单个非终结符&lt;/li&gt;&#xA;&lt;li&gt;3型文法：正则文法-&amp;gt;有限自动机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;右线性文法A-&amp;gt;ω或A-&amp;gt;ωB&lt;/li&gt;&#xA;&lt;li&gt;左线性文法A-&amp;gt;ω或A-&amp;gt;Bω&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;3型文法属于2型文法，不含A-&amp;gt;ε的2型、3型文法属于1型，1型、2型、3型均属于0型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;已知语言对应的文法不唯一&#34;&gt;已知语言，对应的文法不唯一&lt;/h3&gt;&#xA;&lt;h1 id=&#34;第三章-有限自动机与右线性文法&#34;&gt;第三章 有限自动机与右线性文法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;有限自动机&#34;&gt;有限自动机&lt;/h2&gt;&#xA;&lt;h3 id=&#34;有限状态系统&#34;&gt;有限状态系统&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;状态：可以将事物区分开的一种标识&lt;/li&gt;&#xA;&lt;li&gt;具有离散状态的系统：离散状态系统的状态数是有限的&lt;/li&gt;&#xA;&lt;li&gt;具有连续状态的系统，有无限个状态&lt;/li&gt;&#xA;&lt;li&gt;有限状态系统必然是离散状态系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;有限自动机的概念&#34;&gt;有限自动机的概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具有离散输入输出的系统的一种模型（可以没有输出，比较特殊的也可以没有输入）&lt;/li&gt;&#xA;&lt;li&gt;有限的状态&lt;/li&gt;&#xA;&lt;li&gt;状态+输入-&amp;gt;状态转移&lt;/li&gt;&#xA;&lt;li&gt;每次转换的后继状态都唯-&amp;gt;DFA确定的&lt;/li&gt;&#xA;&lt;li&gt;每次转换后继状态不唯一-&amp;gt;NFA不确定的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;fa的模型&#34;&gt;FA的模型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FA可以理解成一个控制器，它读一条输入带上的字符&lt;/li&gt;&#xA;&lt;li&gt;控制器包括有限状态&lt;/li&gt;&#xA;&lt;li&gt;从左到右依次读取字符&lt;/li&gt;&#xA;&lt;li&gt;状态+激励-&amp;gt;状态转移&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;有限自动机-1&#34;&gt;有限自动机&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有限状态集&lt;/li&gt;&#xA;&lt;li&gt;有限输入符号集&lt;/li&gt;&#xA;&lt;li&gt;转移函数&lt;/li&gt;&#xA;&lt;li&gt;一个开始状态&lt;/li&gt;&#xA;&lt;li&gt;一个终态集合，用双圈表示，可以不止一个&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dfa&#34;&gt;DFA&lt;/h2&gt;&#xA;&lt;h3 id=&#34;dfa的形式定义&#34;&gt;DFA的形式定义&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DFA是一个五元组 M = (Q, T, δ, q&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;, F)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Q:有限的状态集合&lt;/li&gt;&#xA;&lt;li&gt;T:有限的输入字母表&lt;/li&gt;&#xA;&lt;li&gt;δ:转换函数&lt;/li&gt;&#xA;&lt;li&gt;q&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;:初始状态&lt;/li&gt;&#xA;&lt;li&gt;F:终止状态集&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;状态转移图&lt;/li&gt;&#xA;&lt;li&gt;状态转移表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最左侧为状态&lt;/li&gt;&#xA;&lt;li&gt;起始状态加箭头，终止状态加*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;扩展转移函数适合于输入字符串&#34;&gt;扩展转移函数适合于输入字符串&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;δ&amp;rsquo;函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;δ&amp;rsquo;: Q * T&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt; -&amp;gt; Q&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-11%2008.30.37.png&#34; alt=&#34;关于Q的说明&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;dfa接受的语言&#34;&gt;DFA接受的语言&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DFA接受的字符串：输入结束后使DFA的状态到达终止状态的字符串&lt;/li&gt;&#xA;&lt;li&gt;DFA接受的语言：被DFA接受的字符串的集合就是DFA接受的语言&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-11%2008.37.34.png&#34; alt=&#34;描述&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;格局&#34;&gt;格局&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;描述有限自动机在某一时刻的工作状态，可以用两个信息表示：当前状态q，待输入字符串w。两者构成一个顺时描述，用(q, w)表示&lt;/li&gt;&#xA;&lt;li&gt;初始格局：(q&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt;, w)&lt;/li&gt;&#xA;&lt;li&gt;终止格局：(q, ε)，q属于F&lt;/li&gt;&#xA;&lt;li&gt;格局数量是无限的&lt;/li&gt;&#xA;&lt;li&gt;有限状态自动机是无记忆的&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-11%2008.44.08.png&#34; alt=&#34;用格局来表示自动机所识别的语言&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;设计有限自动机&#34;&gt;设计有限自动机&lt;/h3&gt;&#xA;&lt;h2 id=&#34;不确定的有限自动机nfa&#34;&gt;不确定的有限自动机(NFA)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个输入可以有多个转移，到达不同的状态，则称为不确定的有限自动机&lt;/li&gt;&#xA;&lt;li&gt;δ: Q * T -&amp;gt; 2&lt;!-- raw HTML omitted --&gt;Q&lt;!-- raw HTML omitted --&gt;, 其余与DFA相同&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;nfa的状态转移函数&#34;&gt;NFA的状态转移函数&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-03-11%2009.19.03.png&#34; alt=&#34;NFA的状态转移函数&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机网络</title>
      <link>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;h1 id=&#34;chapter-1--introduction&#34;&gt;chapter 1  Introduction&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是计算机网络&#34;&gt;什么是计算机网络&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a group of separate but interconnected computers computers, PADs, Smart phones, Home appliances, Senors&lt;/li&gt;&#xA;&lt;li&gt;直接相连/需要中转 有线/无线&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;分布式系统与计算机网络&#34;&gt;分布式系统与计算机网络&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式系统：A collection of independent computers appears to its users as a single coherent system（单一的系统）&lt;/li&gt;&#xA;&lt;li&gt;计算机网络：A collection of autonomous(自主工作) computers interconnected by a single technology&lt;/li&gt;&#xA;&lt;li&gt;The distinction lies with software(especially the OS), rather than with the hardware.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机网络的应用&#34;&gt;计算机网络的应用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;resource-sharing&#34;&gt;Resource sharing&lt;/h3&gt;&#xA;&lt;h3 id=&#34;client-server-modelemaildnsdhcpftp&#34;&gt;Client-Server Model：Email、DNS、DHCP、FTP&lt;/h3&gt;&#xA;&lt;h3 id=&#34;business-applications&#34;&gt;Business Applications&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Communication medium&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email, VoIP, video conferencing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;QoS(Quality of Service)&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;latency (or delay), jitter, bandwidth&lt;/li&gt;&#xA;&lt;li&gt;bit-error-rate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Electronic commerce&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Airlines, bookstores, shopping carts,…&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;home-applications&#34;&gt;Home Applications&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Access to remote information&lt;/p&gt;</description>
    </item>
    <item>
      <title>离散数学</title>
      <link>https://y-m-m.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</guid>
      <description>&lt;h1 id=&#34;关系&#34;&gt;关系&lt;/h1&gt;&#xA;&lt;h2 id=&#34;关系及关系性质&#34;&gt;关系及关系性质&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二元关系 A*B的子集&lt;/li&gt;&#xA;&lt;li&gt;n元关系 A&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;,A&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;&amp;hellip;A&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;的子集，A&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;is domains, domains的顺序是重要的&lt;/li&gt;&#xA;&lt;li&gt;补关系 complementary relations&lt;/li&gt;&#xA;&lt;li&gt;逆关系 inverse relations&lt;/li&gt;&#xA;&lt;li&gt;函数：特殊的关系&lt;/li&gt;&#xA;&lt;li&gt;关系A to A&lt;/li&gt;&#xA;&lt;li&gt;自反：reflexive(irreflexive 反自反)&lt;/li&gt;&#xA;&lt;li&gt;对称：symmetric(antisymmetry 反对称)(asymmetric 非对称)非对称的关系一定是反自反的&lt;/li&gt;&#xA;&lt;li&gt;传递：transive R&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;包含于R(n=1，2，3&amp;hellip;)&lt;/li&gt;&#xA;&lt;li&gt;关系复合：R&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;oR&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;，R&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;复合R&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;关系的表示&#34;&gt;关系的表示&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0-1矩阵&lt;/li&gt;&#xA;&lt;li&gt;directed graphs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;关系闭包closures-of-relations&#34;&gt;关系闭包closures of relations&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自反闭包reflexive closure of R&lt;/li&gt;&#xA;&lt;li&gt;对称闭包&lt;/li&gt;&#xA;&lt;li&gt;传递闭包 求R&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;的并集(i=1,2..n)；Warshall&amp;rsquo;s algorithm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;等价关系equivalence-relations&#34;&gt;等价关系equivalence relations&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自反；对称；传递&lt;/li&gt;&#xA;&lt;li&gt;集合的划分-&amp;gt;等价类partitions&lt;/li&gt;&#xA;&lt;li&gt;商集A/R&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;偏序关系partial-orderings&#34;&gt;偏序关系partial orderings&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;偏序集合partially ordered sets&lt;/li&gt;&#xA;&lt;li&gt;偏序关系partial order 自反、反对称、传递&lt;/li&gt;&#xA;&lt;li&gt;线序关系：可比(comparable)，不可比(incomparable)&lt;/li&gt;&#xA;&lt;li&gt;全序集合linearly ordered set：所有元素对之间均可比 (linear order全序关系或线序关系-&amp;gt;chain)&lt;/li&gt;&#xA;&lt;li&gt;良序关系well-ordered 所有非空集合都有一个最小元&lt;/li&gt;&#xA;&lt;li&gt;乘积偏序product partial order&lt;/li&gt;&#xA;&lt;li&gt;词典顺序lexicographic 先看第一个元素，第一个元素相同再看第二个元素&lt;/li&gt;&#xA;&lt;li&gt;哈斯图Hasse Diagrams&lt;/li&gt;&#xA;&lt;li&gt;极大元maximal element&lt;/li&gt;&#xA;&lt;li&gt;极小元minimal element&lt;/li&gt;&#xA;&lt;li&gt;最大元greatest element(单位元unit element) 不一定有&lt;/li&gt;&#xA;&lt;li&gt;最小元least element(零元 zero element) 不一定有&lt;/li&gt;&#xA;&lt;li&gt;拓扑排序topological sorting（找极小元，找完去掉，继续找极小元）&lt;/li&gt;&#xA;&lt;li&gt;最小上界LUB&lt;/li&gt;&#xA;&lt;li&gt;最大下界GLB&lt;/li&gt;&#xA;&lt;li&gt;格lattices：所有子集都有LUB和GLB&lt;/li&gt;&#xA;&lt;li&gt;子格sublattice：如果a和b都在原格中，则a和b的LUB和GLB也都在原格中&lt;/li&gt;&#xA;&lt;li&gt;有界：如果L有最大元和最小元，then lattice L is said to be bounded&lt;/li&gt;&#xA;&lt;li&gt;如果L是有限格，那么L是有界的&lt;/li&gt;&#xA;&lt;li&gt;分配格Distributive lattice：最大上界和最小下界的运算符和分配律 -&amp;gt; nondistributive&lt;/li&gt;&#xA;&lt;li&gt;补元(complement)：如果a和b的最小上界是最大元，最小下界是最小元，则a和b互为补元&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;半群和群&#34;&gt;半群和群&lt;/h1&gt;&#xA;&lt;h2 id=&#34;半群&#34;&gt;半群&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;封闭 closure&lt;/li&gt;&#xA;&lt;li&gt;二元运算 binary operation&lt;/li&gt;&#xA;&lt;li&gt;交换律 commutative&lt;/li&gt;&#xA;&lt;li&gt;结合率 associative&lt;/li&gt;&#xA;&lt;li&gt;分配律 distributive property&lt;/li&gt;&#xA;&lt;li&gt;德·摩根定理 De Morgan&amp;rsquo;s lawns&lt;/li&gt;&#xA;&lt;li&gt;单位元 Identity for an operation&lt;/li&gt;&#xA;&lt;li&gt;逆元 Iverse&lt;/li&gt;&#xA;&lt;li&gt;广群：非空、封闭的&lt;/li&gt;&#xA;&lt;li&gt;半群：非空、封闭、可结合&lt;/li&gt;&#xA;&lt;li&gt;单位元、幺元 identity&lt;/li&gt;&#xA;&lt;li&gt;独异点、含幺半群 monoid&lt;/li&gt;&#xA;&lt;li&gt;子半群 subsemigroup&lt;/li&gt;&#xA;&lt;li&gt;同构映射 isomorphism：one to one，f(a * b) = f(a) *&amp;rsquo; f(b)&lt;/li&gt;&#xA;&lt;li&gt;同态映射 homomorphism：everywhere-defined function, f(a * b) = f(a) *&amp;rsquo; f(b)&lt;/li&gt;&#xA;&lt;li&gt;products semmigroup 乘积半群&lt;/li&gt;&#xA;&lt;li&gt;quotients of semigroups 商半群&lt;/li&gt;&#xA;&lt;li&gt;同余关系 congruence relation aRa&amp;rsquo; and bRb&amp;rsquo; imply (a*b)R(a&amp;rsquo;*b&#39;)&lt;/li&gt;&#xA;&lt;li&gt;自然同态 natural homomorphism&lt;/li&gt;&#xA;&lt;li&gt;满同态函数 aRb if and only if f(a) = f(b)&lt;/li&gt;&#xA;&lt;li&gt;同态基本定理：满同态与商群（自然同态）同构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;群&#34;&gt;群&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有幺元identity的群成为独异点&lt;/li&gt;&#xA;&lt;li&gt;半群+幺元&lt;/li&gt;&#xA;&lt;li&gt;阿贝尔群Abelian：群+交换律&lt;/li&gt;&#xA;&lt;li&gt;有限群finite group：阶(order)是元素的数目&lt;/li&gt;&#xA;&lt;li&gt;含有一个元素的群：1种，两个：1种，三个：V和Z&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt;两种&lt;/li&gt;&#xA;&lt;li&gt;S&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;：f&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;,f&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;,f&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;分别是三角形绕O点旋转120度，240度和360度；g&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;,g&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;,g&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;分别是让三角形关于I&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;,I&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;和I&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;对称&lt;/li&gt;&#xA;&lt;li&gt;子群subgroup&lt;/li&gt;&#xA;&lt;li&gt;平凡子群trivial subgroups：本身和只含幺元的集合&lt;/li&gt;&#xA;&lt;li&gt;S&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;不是阿贝尔群，Z&lt;!-- raw HTML omitted --&gt;6&lt;!-- raw HTML omitted --&gt;是阿贝尔群，二者不同构&lt;/li&gt;&#xA;&lt;li&gt;Z&lt;!-- raw HTML omitted --&gt;m&lt;!-- raw HTML omitted --&gt;*Z&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;与Z&lt;!-- raw HTML omitted --&gt;mn&lt;!-- raw HTML omitted --&gt;同构当且仅当m与n的最大公因数为1&lt;/li&gt;&#xA;&lt;li&gt;左陪集left coset aH&lt;/li&gt;&#xA;&lt;li&gt;右陪集right coset Ha&lt;/li&gt;&#xA;&lt;li&gt;正规子群normal aH = Ha（集合相等，不一定要每个元素都相等）&lt;/li&gt;&#xA;&lt;li&gt;阿贝尔群的任意一个子群都是正规子群&lt;/li&gt;&#xA;&lt;li&gt;核kernel：同态映射中映射到幺元的元素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;群码&#34;&gt;群码&lt;/h1&gt;&#xA;&lt;h1 id=&#34;先进的计数技巧&#34;&gt;先进的计数技巧&lt;/h1&gt;&#xA;&lt;h2 id=&#34;求解递推关系&#34;&gt;求解递推关系&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;生成函数&lt;/li&gt;&#xA;&lt;li&gt;特征根&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;图&#34;&gt;图&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;欧拉公式：r=e-v+2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;树&#34;&gt;树&lt;/h1&gt;</description>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://y-m-m.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;绪论&#34;&gt;绪论&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cc常见问题&#34;&gt;C/C++常见问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;switch-case语句&#34;&gt;switch-case语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;switch之后的case遇到break才会停止&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;static的作用&#34;&gt;static的作用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态函数：只能在定义它的文件中使用&lt;/li&gt;&#xA;&lt;li&gt;静态变量：初始值为0，在程序运行期间一直存在&lt;/li&gt;&#xA;&lt;li&gt;静态代码块：只有在函数第一次被调用时才会运行&lt;/li&gt;&#xA;&lt;li&gt;缺省情况下全局可见&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;优先级&#34;&gt;优先级&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.的优先级高于*和-&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;[]的优先级高于*&lt;/li&gt;&#xA;&lt;li&gt;()的优先级高于*&lt;/li&gt;&#xA;&lt;li&gt;!=和==的优先级高于位运算&lt;/li&gt;&#xA;&lt;li&gt;算术运算的优先级高于位运算&lt;/li&gt;&#xA;&lt;li&gt;逗号在所有运算符中优先级最低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;const和的不同位置表示的含义&#34;&gt;const和*的不同位置表示的含义&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;const在*之前(const int *a; int const *b)，指针所指对象只读&lt;/li&gt;&#xA;&lt;li&gt;const在*之后(int *const c;)，指针只读&lt;/li&gt;&#xA;&lt;li&gt;const在*之前和之后都有(const int * const d; int const *const e;)，指针和指针所指对象只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;传值传址传引用&#34;&gt;传值、传址、传引用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传值：function(x)/void function(int x)&lt;/li&gt;&#xA;&lt;li&gt;传址：function(&amp;amp;x)/void function(int *x)&lt;/li&gt;&#xA;&lt;li&gt;传引用：function(x)/void function(int &amp;amp;x)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基本概念和术语&#34;&gt;基本概念和术语&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据：对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。&lt;/li&gt;&#xA;&lt;li&gt;数据元素：数据的基本单位，是数据结合中的一个个体，一个数据元素可由若干个数据项组成。&lt;/li&gt;&#xA;&lt;li&gt;数据对象：性质相同的数据元素的集合，是数据的一个子集。&lt;/li&gt;&#xA;&lt;li&gt;数据结构：相互之间存在一种或多种特定关系的数据元素的集合。&lt;/li&gt;&#xA;&lt;li&gt;数据结构：(D,S,Op)。其中D位数据元素的集合；S为D上的关系Op为定义在D上的运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;数据结构的分类&#34;&gt;数据结构的分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集合&lt;/li&gt;&#xA;&lt;li&gt;线性结构&lt;/li&gt;&#xA;&lt;li&gt;树形结构&lt;/li&gt;&#xA;&lt;li&gt;图状结构或网状结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;逻辑结构&#34;&gt;逻辑结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据元素之间的逻辑关系&lt;/li&gt;&#xA;&lt;li&gt;(D, S)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;操作&#34;&gt;操作&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构造函数、析构函数&lt;/li&gt;&#xA;&lt;li&gt;询问类操作：判空、求长度&lt;/li&gt;&#xA;&lt;li&gt;查找类操作：查找某个元素的位置、遍历&lt;/li&gt;&#xA;&lt;li&gt;添加和删除类操作：添加一个数据元素、删除一个数据元素、置空&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;存储结构物理结构&#34;&gt;存储结构（物理结构）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据的逻辑结构在计算机存储器中的映像表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据元素的映像&#34;&gt;数据元素的映像&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用二进制位的位串表示数据元素&lt;/li&gt;&#xA;&lt;li&gt;每个数据元素的映像称为结点&lt;/li&gt;&#xA;&lt;li&gt;每个数据项的映像称为数据域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;不同的存储结构&#34;&gt;不同的存储结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顺序存储结构&lt;/li&gt;&#xA;&lt;li&gt;链式存储结构&lt;/li&gt;&#xA;&lt;li&gt;哈希存储结构（散列存储结构）&lt;/li&gt;&#xA;&lt;li&gt;索引存储结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;刻画（程序）操作对象的特性&lt;/li&gt;&#xA;&lt;li&gt;原子类型&lt;/li&gt;&#xA;&lt;li&gt;结构类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;抽象数据类型adt&#34;&gt;抽象数据类型（ADT）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个数学模型以及定义在该模型上的一组操作&lt;/li&gt;&#xA;&lt;li&gt;原子类型&lt;/li&gt;&#xA;&lt;li&gt;固定聚合类型&lt;/li&gt;&#xA;&lt;li&gt;可变聚合类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;算法的基本概念&#34;&gt;算法的基本概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;算法需要满足的特性&#34;&gt;算法需要满足的特性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有穷性、确定性、可行性、输入、输出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法设计自顶向下逐步求精&#34;&gt;算法设计：自顶向下、逐步求精&lt;/h3&gt;&#xA;&lt;h3 id=&#34;算法的评价标准&#34;&gt;算法的评价标准&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正确性&lt;/li&gt;&#xA;&lt;li&gt;可读性&lt;/li&gt;&#xA;&lt;li&gt;健壮性&lt;/li&gt;&#xA;&lt;li&gt;高效率与地存储量需求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法的后续测试&#34;&gt;算法的后续测试&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在算法中的某些部位插入时间函数time(t)测定算法完成某一功能所需要华为的时间(打印t)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法的事前估计&#34;&gt;算法的事前估计&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;空间复杂度（原地工作：额外空间相对于输入数据量来说是常数）&lt;/p&gt;</description>
    </item>
    <item>
      <title>csapp</title>
      <link>https://y-m-m.github.io/post/csapp/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/csapp/</guid>
      <description>&lt;h1 id=&#34;计算机系统漫游&#34;&gt;计算机系统漫游&lt;/h1&gt;&#xA;&lt;h2 id=&#34;文件的分类&#34;&gt;文件的分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;像hello.c这样只由ASCII字符构成的文件称文本文件&lt;/li&gt;&#xA;&lt;li&gt;所有其他文件都成为二进制文件&lt;/li&gt;&#xA;&lt;li&gt;系统中的所有信息都是由一串比特表示的，区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;文件就是字节序列，每个I/O设备都可以看成文件&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;从源文件到目标文件的转化&#34;&gt;从源文件到目标文件的转化&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;hello.c&amp;ndash;(预处理cpp)&amp;ndash;&amp;gt;hello.i&amp;ndash;(编译器ccl)&amp;ndash;&amp;gt;hello.s&amp;ndash;(汇编器as)&amp;ndash;&amp;gt;hello.o&amp;ndash;(链接器ld)&amp;ndash;&amp;gt;hello&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;系统的硬件组成&#34;&gt;系统的硬件组成&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;总线：传送字&lt;/li&gt;&#xA;&lt;li&gt;I/O设备：键盘、鼠标、显示器、磁盘&lt;/li&gt;&#xA;&lt;li&gt;主存：临时存储设备，由一组动态随机存取存储器（DRAM）芯片组成&lt;/li&gt;&#xA;&lt;li&gt;处理器：CPU，核心为PC（任何时候，PC都指向主存中的某条机器语言指令的地址）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;信息的表示和处理&#34;&gt;信息的表示和处理&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字数据的大小&#34;&gt;字数据的大小&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于一个字长为w的机器而言，虚拟地址的范围是0~2&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;-1，程序最多访问2&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;个字节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;向后兼容&#34;&gt;向后兼容&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linux&amp;gt; gcc -m32 prog.c可以在32位或64位的机器上正确运行&lt;/li&gt;&#xA;&lt;li&gt;linux&amp;gt; gcc -m64 prog.c只能在64位的机器上运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;寻址和字节顺序&#34;&gt;寻址和字节顺序&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小端法：最低有效字节在前&lt;/li&gt;&#xA;&lt;li&gt;大端法：最高有效字节在前&lt;/li&gt;&#xA;&lt;li&gt;网络应用程序的代码编写必须遵守已建立的关于字节顺序的规则，确保发送方机器将它的内部表示转换成网络标准，而接收方机器则将网络标准转换为内部表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基于c数据类型的典型大小以字节为单位&#34;&gt;基于C数据类型的典型大小（以字节为单位）&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;有符号C声明&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;无符号C声明&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;32位字节数&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;64位字节数&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;[signed] char&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned char&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;short&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned short&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;int&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;long&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;unsigned long&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;int32_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;uint32_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;int64_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;uint64_t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;char *&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;float&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;double&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;布尔代数&#34;&gt;布尔代数&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;运算符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;~&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;非&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;amp;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;与&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;｜&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;或&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;^&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;异或&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;也可在C语言中使用，作为按位运算操作符&lt;/li&gt;&#xA;&lt;li&gt;按位运算用法：掩码运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;c语言逻辑运算符&#34;&gt;C语言逻辑运算符&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;运算符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;｜｜&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;或&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;amp;&amp;amp;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;与&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;！&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;非&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;移位运算&#34;&gt;移位运算&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;符号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;laquo;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;左移&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;raquo;(逻辑右移)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;左补0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;raquo;(算术右移)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;左补符号位&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;x&amp;raquo;3与x/8不相等，移位操作向下舍入，除法操作向0舍入&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;整数的数据与算数操作术语&#34;&gt;整数的数据与算数操作术语&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;符号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;B2T&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;二进制转补码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;B2U&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;二进制转无符号数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;U2B&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数转二进制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;U2T&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号转补码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;T2B&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码转二进制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;T2U&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;函数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码转无符号数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TMin&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;常数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;最小补码值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;常数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;最大补码值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;UMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;常数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;最大无符号数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;+&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;t&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码加法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;+&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;u&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数加法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;*&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;t&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码乘法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;*&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;u&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数乘法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;t&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;补码取反&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;u&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;操作&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号数取反&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下表w表示数据表示中的位数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;补码编码&#34;&gt;补码编码&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最高位为负权&lt;/li&gt;&#xA;&lt;li&gt;不对称性：|TMin| = |Tmax| + 1&lt;/li&gt;&#xA;&lt;li&gt;UMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt; = 2TMax&lt;!-- raw HTML omitted --&gt;w&lt;!-- raw HTML omitted --&gt; + 1&lt;/li&gt;&#xA;&lt;li&gt;C库中的文件&amp;lt;limits.h&amp;gt;定义了常量INT_MAX,INT_MIN,UINT_MAX&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;反码和原码&#34;&gt;反码和原码&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;反码：最高有效位的权是-(2&lt;!-- raw HTML omitted --&gt;w-1&lt;!-- raw HTML omitted --&gt;-1)而不是-2&lt;!-- raw HTML omitted --&gt;w-1&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;原码：最高有效位是符号位，用来确定剩下的位该取负权还是正权&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;强制类型转换显式&#34;&gt;强制类型转换（显式）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保持了位模式不变，只是改变了解释这些位的方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;隐式类型转换&#34;&gt;隐式类型转换&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于同时包含有符号和无符号数表达式的处理方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;表达式&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;求值&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0==0U&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&amp;lt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&amp;lt;0U&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2147483647&amp;gt;-2147483647-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2147483647U&amp;gt;-2147483647-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;214743647&amp;gt;(int)2147483648U&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&amp;gt;-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;有符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(unsigned)-1&amp;gt;-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;无符号&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;c语言中tmin的写法&#34;&gt;C语言中TMin的写法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;#define INT_MAX 2147483647&lt;/li&gt;&#xA;&lt;li&gt;#define INT_MAX (-INT_MAX - 1)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;扩展一个数字的位表示&#34;&gt;扩展一个数字的位表示&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无符号数的零扩展&lt;/li&gt;&#xA;&lt;li&gt;补码数的符号扩展&lt;/li&gt;&#xA;&lt;li&gt;例：short sx; (unsigned) sx == (unsigned) (int) sx ,不等价于(unsigned)(unsigned short)sx，即默认先进行符号扩展，再强制类型转换为无符号数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;截断数字&#34;&gt;截断数字&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将一个w位的数字截断为一个k位的数字时，会丢弃高位的w-k位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ieee浮点表示&#34;&gt;IEEE浮点表示&lt;/h2&gt;&#xA;&lt;h3 id=&#34;v---1supssup---m--2supesup&#34;&gt;V = (-1)&lt;!-- raw HTML omitted --&gt;s&lt;!-- raw HTML omitted --&gt;  * M * 2&lt;!-- raw HTML omitted --&gt;E&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号s决定这个数是负数（s=1）还是正数（s=0），而对于数值0的符号位解释作为特殊情况处理&lt;/li&gt;&#xA;&lt;li&gt;尾数 M是一个二进制小数&lt;/li&gt;&#xA;&lt;li&gt;阶码 E的作用是对浮点数加权，这个权重是2的E次幂（可能是负数）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浮点数的位划分&#34;&gt;浮点数的位划分&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一位：符号位&lt;/li&gt;&#xA;&lt;li&gt;k位的阶码字段e（folat：1 8 23，double：1 11 52）&lt;/li&gt;&#xA;&lt;li&gt;n位小数字段编码尾数frac&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;被编码的值分类&#34;&gt;被编码的值分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;规格化的 e != 0 &amp;amp;&amp;amp; e != 255，E = e - bias, M = 1.frac(float:127, double:1023)&lt;/li&gt;&#xA;&lt;li&gt;非规格化的 e = 0，E = 1 - bias, M = 0.frac(提供了一个表示0的方法，表示非常接近0的数)&lt;/li&gt;&#xA;&lt;li&gt;无穷大 e = 255 &amp;amp;&amp;amp; frac = 0&lt;/li&gt;&#xA;&lt;li&gt;NaN e = 255 &amp;amp;&amp;amp; frac != 0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;寄存器&#34;&gt;寄存器&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;63&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;31&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;15&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;7&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rax&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%eax&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ax&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%al&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;返回值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rbx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ebx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rcx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ecx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%cx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%cl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第4个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rdx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%edx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%dx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%dl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第3个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rsi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%esi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%si&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%sil&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第2个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rdi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%edi&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%di&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%dil&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第1个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rbp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%ebp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%bpl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%rsp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%esp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%sp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%spl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;栈指针&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r8b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第5个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r9b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;第6个参数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r10b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r11b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r12b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r13b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r14b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15d&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15w&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;%r15b&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;被调用者保存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;操作数指示符&#34;&gt;操作数指示符&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;格式&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;操作数值&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;名称&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即数&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$Imm&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即数寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;寄存器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;r&lt;!-- raw HTML omitted --&gt;a&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;R[r&lt;!-- raw HTML omitted --&gt;a&lt;!-- raw HTML omitted --&gt;]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;寄存器寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;绝对寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(r&lt;!-- raw HTML omitted --&gt;a&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;间接寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(基址+偏移量)寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;, r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;, r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(, r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;, s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(,r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;,s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;,r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;,s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;存储器&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Imm(r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;,r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;,s)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;M[Imm+R[r&lt;!-- raw HTML omitted --&gt;b&lt;!-- raw HTML omitted --&gt;]+R[r&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;]*s]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;比例变址寻址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;数据传输指令&#34;&gt;数据传输指令&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;指令两端不能同时操作内存&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to linear algebra</title>
      <link>https://y-m-m.github.io/post/introduction-to-linear-algebra/</link>
      <pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/introduction-to-linear-algebra/</guid>
      <description>&lt;h1 id=&#34;矩阵乘法&#34;&gt;矩阵乘法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;将矩阵的初等变换和矩阵乘法相联系&#34;&gt;将矩阵的初等变换和矩阵乘法相联系&lt;/h2&gt;&#xA;&lt;p&gt;以矩阵诠释消元变化 &lt;br&gt;&#xA;左乘是行变换，右乘是列变换&lt;/p&gt;&#xA;&lt;h2 id=&#34;矩阵乘法的其他解释方式&#34;&gt;矩阵乘法的其他解释方式&lt;/h2&gt;&#xA;&lt;p&gt;将结果看作第一个矩阵中列向量按照第二个矩阵进行线性排列    &lt;br&gt;&#xA;或看作第二个矩阵中的行向量按照第一个矩阵进行线性排列的结果&lt;/p&gt;&#xA;&lt;h2 id=&#34;矩阵乘法的五种运算方式&#34;&gt;矩阵乘法的五种运算方式&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常规方法&lt;/li&gt;&#xA;&lt;li&gt;第一个矩阵列向量的线性组合&lt;/li&gt;&#xA;&lt;li&gt;第二个矩阵行向量的线性组合&lt;/li&gt;&#xA;&lt;li&gt;第一个矩阵的列乘以第二个矩阵的行&lt;/li&gt;&#xA;&lt;li&gt;分块乘法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;逆矩阵&#34;&gt;逆矩阵&lt;/h1&gt;&#xA;&lt;h2 id=&#34;逆矩阵-1&#34;&gt;逆矩阵&lt;/h2&gt;&#xA;&lt;p&gt;方阵的左逆等于右逆（其实就相当于AB=E中的A和B可以互换位置）&lt;/p&gt;&#xA;&lt;h2 id=&#34;方阵不可逆的解释&#34;&gt;方阵不可逆的解释&lt;/h2&gt;&#xA;&lt;p&gt;行/列向量中，有一行/列未做出贡献，不能完全构成单位矩阵中的向量  &lt;br&gt;&#xA;Ax = 0有非零解时（其实就相当与A的行列式等于0），方阵不可逆&lt;/p&gt;&#xA;&lt;h2 id=&#34;求解逆矩阵的方法&#34;&gt;求解逆矩阵的方法&lt;/h2&gt;&#xA;&lt;p&gt;拆成列向量的形式，再求解线性方程组 &lt;br&gt;&#xA;增广矩阵的变换（解释：A的逆乘以增广矩阵，将增广矩阵分块来看）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;$ ABB^{-1}A^{-1} = E $&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;$AA^{-1} = I$&lt;br&gt;&#xA;两边取转置    &lt;br&gt;&#xA;$ (A^{-1})^T(A)^T = I $&#xA;-&amp;gt;二者互为转置，转置和逆两种运算对于单个矩阵来说可以颠倒  &lt;br&gt;&#xA;$ (A^T)^{-1}=(A^{-1})^T $&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;消元正确认识矩阵的概念&#34;&gt;消元：正确认识矩阵的概念&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数学符号的含义&#34;&gt;数学符号的含义&lt;/h2&gt;&#xA;&lt;p&gt;L：下三角矩阵  &lt;br&gt;&#xA;U：上三角矩阵&lt;/p&gt;&#xA;&lt;h2 id=&#34;消元的顺序&#34;&gt;消元的顺序&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;$ E_{32}E_{21} $&lt;/em&gt;  &lt;br&gt;&#xA;&lt;em&gt;是相对右侧向量而来的变化，要计算E，要看他们对右侧向量的叠加效果&lt;/em&gt; &lt;br&gt;&#xA;&lt;em&gt;先做第二行的变换再做第三行的变换，第二行的会影响第三行的…… &lt;br&gt;&#xA;$E_{21}会影响E_{32}$ &lt;br&gt;&#xA;挪到右边去就没有这个影响了……（顺序会倒过来)  &lt;br&gt;&#xA;从下面的行开始做消元&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;EA=U   &lt;br&gt;&#xA;A=LU：如果不存在行变换，消元乘数可以直接写入L中&lt;/p&gt;&#xA;&lt;p&gt;消元时左乘E，对A进行行初等变换-&amp;gt;对U进行行初等变换&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;操作数？？        &lt;br&gt;&#xA;$ 大概是n^2+(n-1)^2+(n-2)^2+···+1^2 $&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;$1/3n^3 (对n2积分)$&lt;/strong&gt;&lt;/em&gt;  &lt;br&gt;&#xA;&lt;em&gt;&lt;strong&gt;如果在右侧加上常数向量b，则还需要再进行n^2次操作&#xA;微积分考虑连续状态下对求和，但线性代数是离散的&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;数学名词的含义&#34;&gt;数学名词的含义&lt;/h2&gt;&#xA;&lt;p&gt;置换矩阵：逆与转置相等&lt;/p&gt;&#xA;&lt;h1 id=&#34;向量空间&#34;&gt;向量空间&lt;/h1&gt;&#xA;&lt;h2 id=&#34;子空间&#34;&gt;子空间&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三维空间中，任意穿过原点的平面构成子空间&lt;/li&gt;&#xA;&lt;li&gt;任意穿过原点的直线也构成子空间&lt;/li&gt;&#xA;&lt;li&gt;一个平面与一条直线的并集不是子空间（加法不封闭）&lt;/li&gt;&#xA;&lt;li&gt;一个平面与一条直线的交集是子空间&lt;/li&gt;&#xA;&lt;li&gt;任意两个子空间的交集也依然是子空间&lt;/li&gt;&#xA;&lt;li&gt;向量空间必须满足的条件：加法封闭和数乘封闭&lt;/li&gt;&#xA;&lt;li&gt;零向量是个特殊的向量空间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;两种构筑子空间的方法&#34;&gt;两种构筑子空间的方法：&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从几个向量，通过线性组合&lt;/li&gt;&#xA;&lt;li&gt;在一个方程组中，通过让x满足特定条件（齐次线性方程组）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;求解线性方程组&#34;&gt;求解线性方程组&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ax = b有解，当且仅当b是A的各列向量的线性组合&lt;/li&gt;&#xA;&lt;li&gt;即b属于A的列空间&lt;/li&gt;&#xA;&lt;li&gt;A列的个数n等于未知数的个数&lt;/li&gt;&#xA;&lt;li&gt;A行的个数m等于方程的个数&lt;/li&gt;&#xA;&lt;li&gt;当b是零向量时，x是子空间，否则不是（否则不能穿过原点）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;矩阵的秩r&#34;&gt;矩阵的秩r&lt;/h2&gt;&#xA;&lt;p&gt;自由变量：任意选取自由变量的值，再求解其他的    &lt;br&gt;&#xA;特解（特定的解）：自由向量赋值为0、1 &lt;br&gt;&#xA;有n-r个自由变量  &lt;br&gt;&#xA;行阶梯形矩阵&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
